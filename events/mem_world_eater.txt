# World-Eater
# Code and text by ViolentBeetle
# Idea borrowed by u/Dmaned11123 (Though it's not all that original, is it?)
# The spherical mesh is provided by Gigastructural Engineering people

namespace = mem_world_eater

# Gatekeeper
event = {
    id = mem_world_eater.1
    hide_window = yes
    is_triggered_only = yes

    trigger = {
    }

    immediate = {
        random_list = {
            0 = {}
            35 = {
                random_country = {
                    limit = { is_country_type = global_event }
                    country_event = { id = mem_world_eater.2 days = 36 random = 36 }
                }
            }
        }
    }
}

# Actual beginning
country_event = {
    id = mem_world_eater.2
    hide_window = yes
    is_triggered_only = yes

    trigger = {
        NOT = { has_global_flag = mem_world_eater_started }
    }

    immediate = {
        set_global_flag = mem_world_eater_started
        create_country = {
            name = "World Eater"
            type = mem_world_eater_country
            flag = {
                icon = {
                    category = human
                    file = flag_human_1.dds
                }
                background = {
                    category = backgrounds
                    file = triangle_split.dds
                }
                colors = {
                    "orange"
                    "yellow"
                    "null"
                    "null"
                }
            }
            effect = {
                log = "[This.GetName] country created"
            }
        }
        random_rim_system = {
            limit = {
                OR = {
                    NOT = { exists = space_owner }
                    owner = { is_country_type = default }
                }
            }
            save_event_target_as = ingress_point
        }
        every_country = {
            limit = {
                is_country_type = default
            }
            country_event = { id = mem_world_eater.3 }
        }
        random_country = {
            limit = { is_country_type = mem_world_eater_country }
            log = "[This.GetName] .4 event is called in 36 days"
            country_event = { id = mem_world_eater.4 days = 36 }
        }
    }
}

# Pop up for player with a warning
country_event = {
    id = mem_world_eater.3
    title = mem_world_eater.3.name
    desc = mem_world_eater.3.desc

    is_triggered_only = yes

    picture = GFX_evt_mem_rift
    location = event_target:ingress_point
    show_sound = event_sensor_ping

    option = {
        name = mem_world_eater.3.a
    }
}

# World Eater enters space
country_event = {
    id = mem_world_eater.4
    hide_window = yes
    is_triggered_only = yes

    immediate = {
        log = "World Eater Enters Space. Effect applied to country [This.GetName]. Solar system is [ingress_point.GetName]"
        event_target:ingress_point = {
            create_ambient_object = {
                type = mem_world_eater_sinkhole
                location = this
                duration = 360   
            }
        }
        last_created_ambient_object = {
            save_event_target_as = entry_sinkhole
        }
        create_fleet = {
            name = "Swallower of Worlds"
            effect = {
                create_ship = {
                    name = "Swallower of Worlds"
                    design = "Swallower of Worlds"
                    effect = {
                        set_disable_at_health = 0.1
                        set_ship_flag = mem_world_eater_ship
                        save_event_target_as = world_eater_ship
                    }
                }
                set_owner = root
                set_location = event_target:entry_sinkhole
                set_fleet_flag = mem_world_eater_fleet
            }
        }
        event_target:ingress_point = {
            IF = {
                limit = { exists = space_owner }
                space_owner = {
                    set_country_flag = mem_world_eater_system_owner
                    establish_communications_no_message = root
                    country_event = { id = mem_world_eater.5 }
                }
            }
            every_country = {
                limit = {
                    NOT = { has_country_flag = mem_world_eater_system_owner }
                }
                establish_communications_no_message = root
                country_event = { id = mem_world_eater.6 }
            }            
        }
        # set_country_flag = mem_world_eater_scouting_mode
        country_event = { id = mem_world_eater.7 }
    }
}

# Space Owner is notified
country_event = {
    id = mem_world_eater.5
    title = mem_world_eater.5.name
    desc = mem_world_eater.5.desc

    is_triggered_only = yes

    location = event_target:world_eater_ship
    show_sound = event_red_alert
    picture = GFX_evt_unspeakable_horror

    trigger = {
        is_ai = no
    }

    option = {
        name = BATTLESTATIONS
    }
}

# Everyone else is also notified
country_event = {
    id = mem_world_eater.6
    title = mem_world_eater.5.name
    desc = mem_world_eater.6.desc

    is_triggered_only = yes

    location = event_target:ingress_point
    show_sound = event_sensor_ping
    picture = GFX_evt_unspeakable_horror

    trigger = {
        is_ai = no
    }

    option = {
        name = OK
    }
}

# World Eater Logic - main loop
country_event = {
    id = mem_world_eater.7
    is_triggered_only = yes
    hide_window = yes

    immediate = {
        log = "[This.GetName] engages decision-making loop."
        random_owned_fleet = {
            IF = {
                limit = {
                    OR = {
                        is_fleet_idle = no
                        is_in_combat = yes
                    }
                }
                log = "Fleet is otherwise busy - skipped loop"
            }
            ELSE_IF = {
                limit = {
                    owner = {
                        has_country_flag = mem_world_eater_hungry_mode
                    }
                }
                log = "Engaging hungry mode."
            }
            ELSE = {
                # limit = {
                #     owner = {
                #         has_country_flag = mem_world_eater_scouting_mode
                #     }
                # }
                log = "Engaging scouting mode"
                solar_system = {
                    random_neighbor_system = {
                        random_system_planet = {
                            limit = {
                                NOT = { exists = owner }
                            }
                            log = "[This.GetName] is the scouting target"
                            prevprevprev = {
                                auto_move_to_planet = {
                                    target = PREV
                                    clear_auto_move_on_arrival = yes
                                }
                            }
                        }
                    }
                }
                owner = {
                    random_list = {
                        80 = {
                            log = "Remaining is scouting mode."
                        }
                        20 = {
                            log = "Switching to hungry mode"
                            set_country_flag = mem_world_eater_hungry_mode
                        }
                    }
                }
            }
        }
    }
}