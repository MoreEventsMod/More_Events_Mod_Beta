
##########################
###  The Lost Emperor  ###
###  by Caligula       ###
##########################

namespace = mem_lost_emperor

#How much % of the empire ascends
@mem_lost_emperor_ascension_percentage = 0.15

@MEM_major_neoch_reward = 24
@MEM_minor_neoch_reward = 6


#on_game_start
event = {
	id = mem_lost_emperor.1000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		#disable in multiplayers and for gestalts
		any_country = {
			is_ai = no
			NOR = {
				has_ethic = ethic_gestalt_consciousness
				any_country = {
					NOT = {
						is_same_value = prev
					}
					is_ai = no
				}
			}
		}
	}
	
	immediate = {
		random_list = {
			2 = { } #too bad
			1 = {
				random_country = {
					limit = {
						is_ai = no
					}
					save_event_target_as = mem_player
				}
				random_system = {
					limit = {
						NOT = {
							exists = owner
						}
						is_star_class = sc_neutron_star
						NOT = {
							OR = {
								any_system_planet = {
									OR = {
										is_colonizable = yes
										is_colony = yes
									}
								}
								has_star_flag = enclave
							}
						}
					}
					weights = {
						base = 1
						modifier = {
							mult = 2
							distance = {
								source = event_target:mem_player.capital_scope
								max_distance <= 400
							}
						}
						modifier = {
							mult = 4
							event_target:mem_player = {
								closest_system = {
									limit = {
										NOT = {
											exists = owner
										}
										is_star_class = sc_neutron_star
										NOT = {
											OR = {
												any_system_planet = {
													OR = {
														is_colonizable = yes
														is_colony = yes
													}
												}
												has_star_flag = enclave
											}
										}
									}
									is_same_value = prevprev
								}
							}
						}
					}
					set_star_flag = mem_lost_emperor_anomaly
#					log = "Azran is in the [this.GetName] system."
				}
			}
		}
	}
}

country_event = {
	id = mem_lost_emperor.1001
	title = mem_lost_emperor.1001.name
	desc = mem_lost_emperor.1001.desc
	picture = GFX_evt_enigmatic_cache

	location = event_target:mem_lost_emperor_system

	mean_time_to_happen = {
		years = 30
	}

	trigger = {
		is_ai = no
		any_system_within_border = {
			has_star_flag = mem_lost_emperor_anomaly
			NOT = {
				any_system_planet = {
					has_anomaly = yes
				}
			}
		}
	}

	immediate = {
		random_system_within_border = {
			limit = {
				has_star_flag = mem_lost_emperor_anomaly
				NOT = {
					any_system_planet = {
						has_anomaly = yes
					}
				}
			}
			save_event_target_as = mem_lost_emperor_system
			remove_star_flag = mem_lost_emperor_anomaly
			set_star_flag = mem_lost_emperor_azran
		}
	}

	option = {
		name = mem_lost_emperor.1001.option

		begin_event_chain = {
			event_chain = mem_lost_emperor_azran_chain
		}

		enable_special_project = {
			name = mem_lost_emperor_science_investigate
			location = event_target:mem_lost_emperor_system.star
		}
	}
}

ship_event = {
	id = mem_lost_emperor.1
	title = mem_lost_emperor.1.name
	desc = mem_lost_emperor.1.desc
	picture = GFX_evt_enigmatic_cache

	location = root

	is_triggered_only = yes

	immediate = {
		solar_system = {
			save_event_target_as = mem_lost_emperor_system

			if = {
				limit = {
					has_star_flag = mem_lost_emperor_anomaly
				}
				remove_star_flag = mem_lost_emperor_anomaly
			}
			set_star_flag = mem_lost_emperor_azran
		}
	}

	option = { #Leave be
		name = mem_lost_emperor.1.A
	}
	
	option = { #Check it out
		name = mem_lost_emperor.1.B

		owner = {
			begin_event_chain = {
				event_chain = mem_lost_emperor_azran_chain
			}
		}

		hidden_effect = {
			ship_event = { id = mem_lost_emperor.2 }
		}
	}
	
	option = { #Establish Comms
		name = mem_lost_emperor.1.C

		owner = {
			begin_event_chain = {
				event_chain = mem_lost_emperor_azran_chain
			}
		}

		hidden_effect = {
			ship_event = { id = mem_lost_emperor.4 }
		}
	}
}

#Check it out
ship_event = {
	id = mem_lost_emperor.2
	title = mem_lost_emperor.2.name
	desc = mem_lost_emperor.2.desc
	picture = GFX_evt_enigmatic_cache
	
	location = root

	is_triggered_only = yes

	option = { #Leave be
		name = mem_lost_emperor.2.A
		owner = { end_event_chain = mem_lost_emperor_azran_chain }
	}
	
	option = { #Check it out
		name = mem_lost_emperor.2.B

		hidden_effect = {
			ship_event = { id = mem_lost_emperor.3 }
		}
	}
	
	option = { #Establish Comms
		name = mem_lost_emperor.2.C

		hidden_effect = {
			ship_event = { id = mem_lost_emperor.4 }
		}
	}
}

ship_event = {
	id = mem_lost_emperor.3
	title = mem_lost_emperor.3.name
	desc = mem_lost_emperor.3.desc
	picture = GFX_evt_exploding_ship
	
	location = root

	is_triggered_only = yes

	immediate = {
		destroy_ship = this
	}

	option = { #Leave be
		name = mem_lost_emperor.3.A
		owner = { end_event_chain = mem_lost_emperor_azran_chain }
	}
	
	option = { #Send military next time
		name = mem_lost_emperor.3.B

		enable_special_project = {
			name = mem_lost_emperor_military_investigate
			location = event_target:mem_lost_emperor_system.star
		}
	}
}

#Establish comms
ship_event = {
	id = mem_lost_emperor.4
	title = mem_lost_emperor.4.name
	desc = mem_lost_emperor.4.desc
	
	location = root

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = no_video_feed_room
	}

	#Dialogues
	option = {
		name = mem_lost_emperor.4.A.dialogue
		response_text = mem_lost_emperor.classified

		is_dialog_only = yes
	}
	option = {
		name = mem_lost_emperor.4.B.dialogue
		response_text = mem_lost_emperor.classified

		is_dialog_only = yes
	}
	option = {
		name = mem_lost_emperor.4.C.dialogue
		response_text = mem_lost_emperor.classified

		is_dialog_only = yes
	}
	option = {
		name = mem_lost_emperor.4.D.dialogue
		response_text = mem_lost_emperor.4.D.response

		is_dialog_only = yes
	}
	option = {
		name = mem_lost_emperor.4.E.dialogue
		response_text = mem_lost_emperor.4.E.response

		is_dialog_only = yes
	}

	#Actions
	
	option = { #Whatever
		name = mem_lost_emperor.4.F.action
		custom_tooltip = mem_lost_emperor.4.F.tooltip

		hidden_effect = {
			ship_event = { id = mem_lost_emperor.3 }
		}
	}
	
	option = { #Leave be
		name = mem_lost_emperor.4.G.action

		owner = { end_event_chain = mem_lost_emperor_azran_chain }
	}
	
	option = { #Return with military
		name = mem_lost_emperor.4.H.action

		custom_tooltip = mem_lost_emperor.4.H.action.tooltip

		enable_special_project = {
			name = mem_lost_emperor_military_investigate
			location = event_target:mem_lost_emperor_system.star
		}
	}
}


#Azran activates itself
ship_event = {
	id = mem_lost_emperor.5
	title = mem_lost_emperor.5.name
	desc = {
		trigger = {
			owner = {
				NOT = {
					has_country_flag = mem_azran_failed_before
				}
			}
		}
		text = mem_lost_emperor.5.desc
	}
	desc = {
		trigger = {
			owner = {
				has_country_flag = mem_azran_failed_before
			}
		}
		text = mem_lost_emperor.5.desc.again
	}
	picture = GFX_evt_unknown_ships
	
	location = root

	is_triggered_only = yes

	immediate = {
		solar_system.star = {
			create_country = {
				type = mem_azran
				name = "Azran"
				effect = {
					set_country_flag = mem_azran
					establish_communications_no_message = root.owner
				}
			}
			create_fleet = {
				name = "Azran"

				settings = {
					spawn_debris = no
					is_boss = yes
				}

				effect = {
					set_owner = last_created_country

					create_ship_design = {
						design = "NAME_Azran"
					}
					create_ship = {
						name = ""
						design = last_created_design
						upgradable = no
					}

					set_location = prev
				}
			}
		}
	}

	option = {
		name = mem_lost_emperor.5.option
	}
}

#You lost to Azran
# This = owner of fleet 1 (loser)
# From = owner of fleet 2 (winner)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = mem_lost_emperor.6
	title = mem_lost_emperor.6.name
	desc = mem_lost_emperor.6.desc
	picture = GFX_evt_exploding_ship
	
	location = fromfromfrom.solar_system

	is_triggered_only = yes

	trigger = {
		from = {
			has_country_flag = mem_azran
		}
		fromfromfrom = {
			is_in_combat = no
		}
	}

	immediate = {
		set_country_flag = mem_azran_failed_before
		fromfromfrom = {
			solar_system = {
				save_event_target_as = mem_lost_emperor_system
			}
			delete_fleet = this
		}
		from = {
			destroy_country = yes
		}
	}

	option = { #we will return in greater force
		name = mem_lost_emperor.6.A
		
		enable_special_project = {
			name = mem_lost_emperor_military_investigate_1
			location = event_target:mem_lost_emperor_system.star
		}

		hidden_effect = {
			if = {
				limit = { NOT = { has_country_flag = mem_azran_special_project } }
				set_country_flag = mem_azran_special_project
				country_event = { id = mem_lost_emperor.605 days = 10 }
			}
		}
	}
	option = { #that's enough of this
		name = mem_lost_emperor.6.B
		end_event_chain = mem_lost_emperor_azran_chain
	}
}

#Enable special project to find out more about Azran
country_event = {
	id = mem_lost_emperor.605
	title = mem_lost_emperor.605.name
	desc = mem_lost_emperor.605.desc
	picture = GFX_evt_unidentified_monster

	is_triggered_only = yes

	option = {
		name = mem_lost_emperor.605.option
		
		enable_special_project = {
			name = mem_lost_emperor_find_out_about_azran
			location = capital_scope
		}
	}
}

country_event = {
	id = mem_lost_emperor.606
	title = mem_lost_emperor.606.name
	desc = mem_lost_emperor.606.desc
	picture = GFX_evt_unidentified_monster

	is_triggered_only = yes

	option = {
		name = mem_lost_emperor.606.option
		add_monthly_resource_mult = {
			resource = physics_research
			value = 6			
		}
		hidden_effect = {
			random_system = {
				limit = { has_star_flag = mem_lost_emperor_azran }
				save_event_target_as = mem_lost_emperor_system
			}
			create_point_of_interest = {
				id = mem_lost_emperor.poi.606
				name = mem_azran
				desc = "mem_lost_emperor.606.desc"
				event_chain = mem_lost_emperor_azran_chain
				location = event_target:mem_lost_emperor_system
			}
		}
	}
}


#You defeated Azran
# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = mem_lost_emperor.7
	title = mem_lost_emperor.7.name
	desc = mem_lost_emperor.7.desc
	picture = GFX_evt_exploding_ship
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes

	trigger = {
		from = {
			has_country_flag = mem_azran
		}
	}

	immediate = {
		set_country_flag = mem_lost_emperor_vanquisher_of_azran
		fromfrom = {
			solar_system = {
				save_event_target_as = mem_lost_emperor_system
			}
			if = {
				limit = {
					NOT = {
						is_ship_class = shipclass_starbase
					}
				}
				save_event_target_as = mem_azran_vanquisher_fleet
			}
			else = {
				solar_system = {
					random_fleet_in_system = {
						limit = {
							owner = {
								is_same_value = root
							}
							is_ship_class = shipclass_military
							#Heck, just in case
							NOT = {
								is_ship_class = shipclass_starbase
							}
						}
						save_event_target_as = mem_azran_vanquisher_fleet
					}
				}
			}
		}
	}

	option = { #Let's see what they have to say.
		name = mem_lost_emperor.7.option
		end_event_chain = mem_lost_emperor_azran_chain
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.8 }
		}
	}
}


#Establish comms with Neochadanus
country_event = {
	id = mem_lost_emperor.8
	title = mem_lost_emperor.8.name
	desc = mem_lost_emperor.8.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	immediate = {
		create_species = {
			name = "Immortals"
			class = random_non_machine
			immortal = yes
			pops_can_reproduce = no
			
			traits = {
				trait = trait_psionic
				trait = trait_cybernetic
				trait = trait_erudite
				trait = trait_very_strong
				trait = trait_venerable
			}
		}
#		create_country = {
#			type = global_event
#			species = last_created_species
#
#			effect = {
#				save_event_target_as = mem_neoch_global_event
#			}
#		}
		mem_create_neochadanus = yes
	}

	option = {
		name = mem_lost_emperor.8.option
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.9 }
		}
	}
}


country_event = {
	id = mem_lost_emperor.9
	title = mem_lost_emperor.9.name
	desc = mem_lost_emperor.9.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = { #You are insane
		name = mem_lost_emperor.9.A
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.10 }
		}
	}
	
	option = { #OK emperor talk please
		name = mem_lost_emperor.9.B
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.11 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.10
	title = mem_lost_emperor.10.name
	desc = mem_lost_emperor.10.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = { #This convo is over
		name = mem_lost_emperor.10.A
		
		hidden_effect = {
			set_timed_country_flag = {
				flag = mem_scorned_neochadanus
				days = 5				
			}
			country_event = { id = mem_lost_emperor.20 }
		}
	}
	
	option = { #OK emperor talk please
		name = mem_lost_emperor.10.B
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.11 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.11
	title = mem_lost_emperor.11.name
	desc = mem_lost_emperor.11.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = {
		name = mem_lost_emperor.11.option
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.12 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.12
	title = mem_lost_emperor.12.name
	desc = mem_lost_emperor.12.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = {
		name = mem_lost_emperor.12.option
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.13 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.13
	title = mem_lost_emperor.13.name
	desc = mem_lost_emperor.13.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = {
		name = mem_lost_emperor.13.option

		hidden_effect = {
			country_event = { id = mem_lost_emperor.14 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.14
	title = mem_lost_emperor.14.name
	desc = mem_lost_emperor.14.desc
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = {
		name = mem_lost_emperor.14.option
		
		hidden_effect = {
			country_event = { id = mem_lost_emperor.20 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.20
	title = mem_lost_emperor.20.name
	desc = {
		trigger = {
			NOT = {
				has_country_flag = mem_scorned_neochadanus
			}
		}
		text = mem_lost_emperor.20.desc
	}
	desc = {
		trigger = {
			has_country_flag = mem_scorned_neochadanus
		}
		text = mem_lost_emperor.20.desc.scorned
	}
	
	location = event_target:mem_lost_emperor_system

	is_triggered_only = yes
	diplomatic = yes

	picture_event_data = {
		room = ethic_spaceship_room
		portrait = event_target:mem_neochadanus
	}

	option = {
		name = mem_lost_emperor.20.accept
		custom_tooltip = mem_lost_emperor.20.accept.tooltip

		hidden_effect = {
			create_fleet = {
				name = "NAME_Other_Science_Ship"
				effect = {
					set_owner = root
					create_ship_design = {
						design = "NAME_Prototype"
					}
					create_ship = {
						name = "NAME_From_Beyond"
						design = last_created_design
						graphical_culture = "extra_dimensional_01"
						prefix = no
						upgradable = no
					}
					set_location = root.capital_scope
					save_event_target_as = deleted_ship
				}
			}
			event_target:deleted_ship = {
				set_leader = mem_neochadanus
				leader = {
					save_event_target_as = mem_neochadanus
					root = {
						assign_leader = event_target:mem_neochadanus
					}
				}
				delete_fleet = this
			}

			set_country_flag = mem_emperor_is_neochadanus
			set_timed_country_flag = {
				flag = mem_emperor_is_neochadanus_fifty
				years = 50
			}
		}
		
		if = {
			limit = {
				NOT = {
					has_authority = auth_imperial
				}
			}
			if = {
				limit = {
					NOR = {
						has_ethic = ethic_authoritarian
						has_ethic = ethic_fanatic_authoritarian
					}
				}
				shift_ethic = ethic_authoritarian
			}
			custom_tooltip = mem_lost_emperor.20.accept.tooltip3
			hidden_effect = {
				set_timed_country_flag = {
					flag = mem_just_set_neoch
					days = 30
				}
				country_event = { id = mem_lost_emperor.2001 days = 2 }
			}
		}

		custom_tooltip = mem_lost_emperor.20.accept.tooltip2

		response_text = mem_lost_emperor.20.accept.response
	}
	
	option = {
		name = mem_lost_emperor.20.suggest

		response_text = mem_lost_emperor.20.suggest.response

		is_dialog_only = yes

		trigger = {
			NOT = {
				has_authority = auth_imperial
			}
		}
	}
	
	option = {
		name = mem_lost_emperor.20.imprison
		custom_tooltip = mem_lost_emperor.20.imprison.tooltip

		hidden_effect = {
			country_event = { id = mem_lost_emperor.21 days = 1 }
			event_target:mem_azran_vanquisher_fleet = {
				set_fleet_flag = mem_neochadanus_carrying_fleet
			}
		}

		trigger = {
			exists = event_target:mem_azran_vanquisher_fleet
		}
		
		response_text = mem_lost_emperor.20.imprison.response
	}
	
	option = {
		name = mem_lost_emperor.20.dissemble

		random_list = {
			2 = {
				custom_tooltip = mem_lost_emperor.20.dissemble.tooltip.success
				hidden_effect = {
					country_event = { id = mem_lost_emperor.40 days = 5 }
				}
			}
			1 = {
				custom_tooltip = mem_lost_emperor.20.dissemble.tooltip.fail
				hidden_effect = {
					event_target:mem_azran_vanquisher_fleet = {
						fleet_event = { id = mem_lost_emperor.29 days = 5 }
					}
				}
			}
		}

		response_text = mem_lost_emperor.20.dissemble.response
	}
	
	option = {
		name = mem_lost_emperor.20.destroy
		custom_tooltip = mem_lost_emperor.20.destroy.tooltip

		add_monthly_resource_mult = {
			resource = physics_research
			value = @MEM_minor_neoch_reward
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @MEM_minor_neoch_reward
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @MEM_minor_neoch_reward
		}
		
		response_text = mem_lost_emperor.20.destroy.response
	}
	
	option = {
		name = mem_lost_emperor.20.release

		trigger = {
			num_owned_planets > 1
		}

		hidden_effect = {
			save_event_target_as = mem_neochadanus_victim_country
			
			if = {
				limit = {
					any_owned_planet = {
						is_planet_class = pc_city
						is_capital = no
						solar_system = {
							NOT = {
								is_same_value = root.capital_scope.solar_system
							}
						}
					}
				}
				closest_system = {
					limit = {
						exists = owner
						owner = {
							is_same_value = root
						}
						any_system_planet = {
							has_owner = yes
							is_colony = yes
							is_planet_class = pc_city
							is_capital = no
						}
						NOT = {
							any_system_planet = {
								is_capital = yes
							}
						}
					}
					random_system_planet = {
						limit = {
							has_owner = yes
							is_colony = yes
							is_planet_class = pc_city
							is_capital = no
						}
						planet_event = { id = mem_lost_emperor.30 days = 180 }
					}
				}
			}
			else = {
				closest_system = {
					limit = {
						exists = owner
						owner = {
							is_same_value = root
						}
						any_system_planet = {
							has_owner = yes
							is_colony = yes
							is_capital = no
						}
						NOT = {
							any_system_planet = {
								is_capital = yes
							}
						}
					}
					random_system_planet = {
						limit = {
							has_owner = yes
							is_colony = yes
							is_capital = no
						}
						set_timed_planet_flag = {
							flag = mem_lost_emperor_crazy
							days = 200
						}
						planet_event = { id = mem_lost_emperor.30 days = 180 }
					}
				}
			}

			set_timed_country_flag = {
				flag = mem_neochadanus_not_scorned
				days = 360
			}
		}

		custom_tooltip = mem_lost_emperor.20.release.1
		custom_tooltip = mem_lost_emperor.20.release.2
	}
}




######Imprison subchain

#Simple notification
country_event = {
	id = mem_lost_emperor.21
	title = mem_lost_emperor.21.name
	desc = mem_lost_emperor.21.desc
	picture = GFX_evt_ship_in_orbit
	
	location = event_target:mem_lost_emperor_system
	
	is_triggered_only = yes
	
	option = {
		name = OK
	}
}

country_event = {
	id = mem_lost_emperor.2001
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		change_government = {
			authority = auth_imperial
			civics = random
		}
		if = {
			limit = {
				NOT = {
					has_authority = auth_imperial
				}
			}
			country_event = { id = mem_lost_emperor.2001 days = 1 }
		}
	}
}


#Escapes

# A fleet has entered a system
# Scope = Fleet
# From = System
fleet_event = {
	id = mem_lost_emperor.22
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_fleet_flag = mem_neochadanus_carrying_fleet
		
		owner = {
			num_owned_planets > 1
			any_owned_planet = {
				solar_system = {
					NOT = {
						is_same_value = prevprev.solar_system
					}
				}
			}
		}
	}

	immediate = {
		random_list = {
			5 = {
				fleet_event = { id = mem_lost_emperor.23 }
			}
			95 = { }
		}
	}
}

#FromFrom = system
fleet_event = {
	id = mem_lost_emperor.23
	title = mem_lost_emperor.23.name
	desc = mem_lost_emperor.23.desc
	picture = GFX_evt_federation_fleet
	
	location = root
	
	is_triggered_only = yes
	
	immediate = {
		mem_neochadanus_seizes_ship_and_flees = yes
		remove_fleet_flag = mem_neochadanus_carrying_fleet
	}
	
	option = {
		name = WORRYING
		custom_tooltip = mem_lost_emperor.23.tooltip
	}
}



#Made it home. (Not quite the most ideal solution but should work)
# A fleet has entered a system
# Scope = Fleet
# From = System
fleet_event = {
	id = mem_lost_emperor.25
	hide_window = yes
	is_triggered_only = yes
	
	location = root

	trigger = {
		has_fleet_flag = mem_neochadanus_carrying_fleet
		solar_system = {
			is_same_value = root.owner.capital_scope.solar_system
		}
	}
	
	immediate = {
		owner = {
			country_event = { id = mem_lost_emperor.251 days = 30 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.251
	title = mem_lost_emperor.25.name
	desc = mem_lost_emperor.25.desc
	picture = GFX_evt_space_station
	
	location = capital_scope

	is_triggered_only = yes

	trigger = {
		from = {
			solar_system = {
				is_same_value = root.capital_scope.solar_system
			}
			has_fleet_flag = mem_neochadanus_carrying_fleet
		}
	}

	immediate = {
		from = {
			remove_fleet_flag = mem_neochadanus_carrying_fleet
		}
	}

	option = {
		name = EXCELLENT
		add_modifier = {
			modifier = mem_lost_emperor_fount_of_knowledge_modifier
			days = -1
		}
	}
}









#Negative follow-up to .20.dissemble
fleet_event = {
	id = mem_lost_emperor.29
	title = mem_lost_emperor.29.name
	desc = mem_lost_emperor.29.desc
	picture = GFX_evt_federation_fleet
	
	location = root
	
	is_triggered_only = yes
	
	immediate = {
		mem_neochadanus_seizes_ship_and_flees = yes
	}
	
	option = {
		name = WORRYING
		custom_tooltip = mem_lost_emperor.29.tooltip
	}
}


##### Neochadanus Escaped, seized a planet 

planet_event = {
	id = mem_lost_emperor.30
	title = mem_lost_emperor.30.name
	desc = mem_lost_emperor.30.desc
	picture = GFX_evt_space_station
	location = root
	
	is_triggered_only = yes
	
	trigger = {
		has_owner = yes
		exists = owner
		owner = {
			is_same_value = event_target:mem_neochadanus_victim_country
		}
	}
	
	immediate = {
		if = {
			limit = {
				has_planet_flag = mem_lost_emperor_crazy
			}
			from.species = {
				save_event_target_as = mem_neoch_releaser_species
			}
		}
		else = {
			from.owner.species = {
				save_event_target_as = mem_neoch_releaser_species
			}
		}

		create_country = {
			#Neochadanus stuff!
			type = mem_neochadanus_ascendant

			name = mem_neochadanus_country_name
			
			authority = auth_imperial
			
			ethos = {
				ethic = ethic_authoritarian
				ethic = ethic_spiritualist
				ethic = ethic_militarist
			}
			
			civics = {
				civic = mem_neochadanus_civic_1
				civic = mem_neochadanus_civic_2
				civic = mem_neochadanus_civic_3
			}

			species = event_target:mem_neoch_releaser_species
			
			effect = {
				save_event_target_as = mem_neochadanus_ascendant

#				mem_create_neochadanus = yes
				
				create_fleet = {
					name = "NAME_Other_Science_Ship"
					effect = {
						set_owner = event_target:mem_neochadanus_ascendant
						create_ship_design = {
							design = "NAME_Prototype"
						}
						create_ship = {
							name = "NAME_From_Beyond"
							design = last_created_design
							graphical_culture = "extra_dimensional_01"
							prefix = no
							upgradable = no
						}
						set_location = root
						save_event_target_as = deleted_ship
					}
				}
				event_target:deleted_ship = {
					set_leader = mem_neochadanus
					leader = {
						save_event_target_as = mem_neochadanus
						unassign_leader = this
					}
					event_target:mem_neochadanus_ascendant = {
						assign_leader = event_target:mem_neochadanus
					}
					delete_fleet = this
				}


				
				add_modifier = { #ethics pull and unrest annihilated
					modifier = mem_neochadanus_setup_boost
					days = 4800
				}
				
				root = {					
					if = {
						limit = {
							NOT = {
								is_planet_class = pc_city
							}
						}
						change_planet_size = 3
					}
					add_modifier = { #these are too dangerous to not limit to one planet
						modifier = mem_neochadanus_setup_boost_planet
						days = 4800
					}
				
					set_owner = prev
					
					solar_system.starbase = {
						set_owner = prevprev
						set_starbase_size = starbase_citadel
						
						set_starbase_module = {
							slot = 0
							module = shipyard
						}
						set_starbase_module = {
							slot = 1
							module = shipyard
						}
						set_starbase_module = {
							slot = 2
							module = shipyard
						}
						set_starbase_module = {
							slot = 3
							module = anchorage
						}
						set_starbase_module = {
							slot = 4
							module = anchorage
						}
						set_starbase_module = {
							slot = 5
							module = missile_battery
						}
						
						set_starbase_building = {
							slot = 0
							building = crew_quarters
						}
						set_starbase_building = {
							slot = 1
							building = hydroponics_bay
						}
						set_starbase_building = {
							slot = 2
							building = fleet_academy
						}
						set_starbase_building = {
							slot = 3
							building = target_uplink_computer
						}
					}

					mem_lost_emperor_give_root_planet_enough_pops_and_infrastructure = yes

					#Give them some habitats, because why not
					solar_system = {
						while = {
							limit = {
								any_system_planet = {
									NOT = { has_anomaly = yes }
									NOR = {
										has_planet_flag = megastructure
										has_planet_flag = has_megastructure
										solar_system = {
											has_star_flag = ring_world_built
										}
										is_planet_class = pc_ringworld_habitable
										is_planet_class = pc_ringworld_habitable_damaged
										is_planet_class = pc_ringworld_tech
										is_planet_class = pc_ringworld_tech_damaged
										is_planet_class = pc_ringworld_seam
										is_planet_class = pc_ringworld_seam_damaged
										is_planet_class = pc_habitat
									}
									has_orbital_station = no
									NOR = {
										is_asteroid = yes
										is_moon = yes
									}
									is_star = no
								}
							}
							count = 3
							
							random_system_planet = {
								limit = { #this is the conditions for building a habitat in the habitat file
									NOT = { has_anomaly = yes }
									NOR = {
										has_planet_flag = megastructure
										has_planet_flag = has_megastructure
										solar_system = {
											has_star_flag = ring_world_built
										}
										is_planet_class = pc_ringworld_habitable
										is_planet_class = pc_ringworld_habitable_damaged
										is_planet_class = pc_ringworld_tech
										is_planet_class = pc_ringworld_tech_damaged
										is_planet_class = pc_ringworld_seam
										is_planet_class = pc_ringworld_seam_damaged
										is_planet_class = pc_habitat
									}
									has_orbital_station = no
									NOR = {
										is_asteroid = yes
										is_moon = yes
									}
									is_star = no
								}

								save_event_target_as = mem_planet
#								log = "[this.GetName]"
								
								solar_system = {
									spawn_planet = {
										class = "pc_habitat"
										location = event_target:mem_planet
										orbit_location = yes
										orbit_angle_offset = 45
										orbit_distance_offset = 9.899
										size = 6
										has_ring = no
										
										init_effect = {
											set_name = "HABITAT_PLANET_NAME"
											set_planet_entity = {
												entity = "orbital_habitat_entity"
												graphical_culture = event_target:mem_neochadanus_ascendant
											}
											surveyed = {
												set_surveyed = yes
												surveyor = event_target:mem_neochadanus_ascendant
											}
											set_all_comms_surveyed = yes
											clear_blockers = yes
											if = {
												limit = {
													from = { has_ascension_perk = ap_master_builders }
													NOT = { has_modifier = master_builders_habitats }
												}
												add_modifier = {
													modifier = master_builders_habitats
													days = -1
												}
											}
											set_planet_flag = megastructure
											set_planet_flag = habitat
										}
									}
								}
								set_planet_flag = has_megastructure
								#remove_megastructure = fromfrom
							}
						}
					}
				}
				
				event_target:mem_neochadanus_victim_country = {
					every_relation = {
						limit = {
							NOT = {
								is_same_value = prevprev
							}
						}
						establish_communications_no_message = prevprev
						country_event = { id = mem_lost_emperor.31 } #tell them about it
					}
					establish_communications_no_message = prev
				}
				
				mem_give_neochadanus_resources = yes
				
				set_timed_country_flag = {
					flag = mem_neochadanus_ascendant_timer
					years = 50
				}
				
				if = {
					limit = {
						NOT = {
							event_target:mem_neochadanus_victim_country = {
								has_country_flag = mem_neochadanus_not_scorned
							}
						}
					}
					add_opinion_modifier = {
						who = event_target:mem_neochadanus_victim_country
						modifier = mem_neochadanus_scorned
					}
				}
				
				while = {
					count = 4
					
					closest_system = {
						limit = {
							is_owned_by = event_target:mem_neochadanus_victim_country
							has_owner = no
						}
						max_steps = 1
						starbase = {
							set_owner = event_target:mem_neochadanus_ascendant
						}
					}
				}
			}
		}
	}
	
	option = { #we must recover this lost territory!
		name = mem_lost_emperor.30.A
		
		hidden_effect = {
			solar_system = {
				add_claims = {
					who = event_target:mem_neochadanus_victim_country
				}
			}
		}
		event_target:mem_neochadanus_victim_country = {
			declare_war = {
				target = event_target:mem_neochadanus_ascendant
				attacker_war_goal = wg_conquest
			}
		}
	}
	
	option = { #let's see how this develops
		name = mem_lost_emperor.30.B
	}
}

#Tell all the other countries (actually this is unnecessary as no non-AI country can exist so hid it)
country_event = {
	id = mem_lost_emperor.31
#	title = mem_lost_emperor.31.name
#	desc = {
#		text = mem_lost_emperor.31.desc
#		trigger = {
#			NOR = {
#				has_authority = auth_machine_intelligence
#				is_synthetic_empire = yes
#			}
#		}
#	}
#	desc = {
#		text = mem_lost_emperor.31.desc.machine
#		trigger = {
#			OR = {
#				has_authority = auth_machine_intelligence
#				is_synthetic_empire = yes
#			}
#		}
#	}
#
#	diplomatic = yes
#
#	picture_event_data = {
#		portrait = event_target:mem_neochadanus_ascendant
#		planet_background = event_target:mem_neochadanus_ascendant
#		graphical_culture = event_target:mem_neochadanus_ascendant
#		city_level = event_target:mem_neochadanus_ascendant
#		room = event_target:mem_neochadanus_ascendant.ruler
#	}

	hide_window = yes
	is_triggered_only = yes

#	option = {
#		name = mem_lost_emperor.31.option
#	}
}

country_event = {
	id = mem_lost_emperor.38

	hide_window = yes
	mean_time_to_happen = {
		years = 10
	}

	trigger = {
		is_country_type = mem_neochadanus_ascendant
		is_subject = no
		is_at_war = no
		NOR = {
			has_country_flag = mem_neochadanus_ascendant_timer
			any_neighbor_country = {
				OR = {
					is_country_type = extradimensional
					is_country_type = extradimensional_2
					is_country_type = extradimensional_3
					is_country_type = swarm
					is_country_type = ai_empire
				}
			}
		}
	}
	
	immediate = {
		ruler = {
			save_event_target_as = mem_neochadanus
		}
		every_relation = {
			country_event = { id = mem_lost_emperor.39 }
		}
	}
	after = {
		set_country_flag = mem_neochadanus_ascends
		every_owned_planet = {
			remove_planet = yes
		}
	}
}


country_event = {
	id = mem_lost_emperor.39
	title = mem_lost_emperor.39.name
	desc = mem_lost_emperor.39.desc

	location = from.capital_scope

	diplomatic = yes

	picture_event_data = {
		portrait = event_target:mem_neochadanus
		planet_background = from
		graphical_culture = from
		city_level = from
		room = from.ruler
	}

	is_triggered_only = yes

	option = {
		name = mem_lost_emperor.39.option

		trigger = {
			NOR = {
				has_civic = civic_fanatic_purifiers
			}
		}
	}
	option = {
		name = mem_lost_emperor.39.option.purifiers
		
		trigger = {
			has_civic = civic_fanatic_purifiers
		}
	}
}


#Disassemble Positive Outcome
country_event = {
	id = mem_lost_emperor.40
	title = mem_lost_emperor.40.name
	desc = mem_lost_emperor.40.desc
	picture = GFX_evt_mem_ancient_robots_project	
	
	location = event_target:mem_lost_emperor_system
	
	is_triggered_only = yes

	option = {
		name = EXCELLENT
		
		add_monthly_resource_mult = {
			resource = physics_research
			value = @MEM_major_neoch_reward
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @MEM_major_neoch_reward
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @MEM_major_neoch_reward
		}
		
		switch = {
			trigger = has_technology
			tech_synthetic_workers = {
				add_modifier = {
					modifier = mem_last_emperor_synth_boost_2
					days = -1
				}
			}
			tech_sapient_ai = {
				add_research_option = tech_synthetic_workers
				add_tech_progress = {
					tech = tech_synthetic_workers
					progress = 0.33
				}
				add_modifier = {
					modifier = mem_last_emperor_synth_boost
					days = -1
				}
			}
			tech_droid_workers = {
				add_research_option = tech_sapient_ai
				add_tech_progress = {
					tech = tech_sapient_ai
					progress = 0.33
				}
				add_modifier = {
					modifier = mem_last_emperor_synth_boost
					days = -1
				}
			}
			tech_robotic_workers = {
				add_research_option = tech_droid_workers
				add_tech_progress = {
					tech = tech_droid_workers
					progress = 0.33
				}
				add_modifier = {
					modifier = mem_last_emperor_synth_boost
					days = -1
				}
			}
			tech_powered_exoskeletons = {
				add_research_option = tech_robotic_workers
				add_tech_progress = {
					tech = tech_robotic_workers
					progress = 0.33
				}
				add_modifier = {
					modifier = mem_last_emperor_synth_boost
					days = -1
				}
			}
			default = {
				add_research_option = tech_powered_exoskeletons
				add_tech_progress = {
					tech = tech_powered_exoskeletons
					progress = 0.33
				}
				add_modifier = {
					modifier = mem_last_emperor_synth_boost
					days = -1
				}
			}
		}
	}
}






#Fallback in case dies for some reason
country_event = {
	id = mem_lost_emperor.800
	title = mem_lost_emperor.800.name
	desc = mem_lost_emperor.800.desc
	picture = GFX_evt_space_funeral
	
	is_triggered_only = yes
	
	trigger = {
		has_country_flag = mem_emperor_is_neochadanus
		from = {
			has_leader_flag = mem_neochadanus
		}
	}
	
	immediate = {
		remove_country_flag = mem_emperor_is_neochadanus
	}
	
	option = {
		name = mem_lost_emperor.800.option
	}
}


#Fallback in case changes authority
country_event = {
	id = mem_lost_emperor.801
	title = mem_lost_emperor.801.name
	desc = mem_lost_emperor.801.desc
	
	diplomatic = yes

	picture_event_data = {
		portrait = event_target:mem_angry_neochadanus
		planet_background = root
		graphical_culture = root
		city_level = root
		room = root.ruler
	}
	
	mean_time_to_happen = {
		months = 9
	}
	
	trigger = {
		has_country_flag = mem_emperor_is_neochadanus
		ruler = {
			has_leader_flag = mem_neochadanus
		}
		NOR = {
			has_authority = auth_imperial
			has_country_flag = mem_just_set_neoch
		}
	}
	
	immediate = {
		ruler = {
			save_event_target_as = mem_angry_neochadanus
		}
		remove_country_flag = mem_emperor_is_neochadanus

		exile_leader_as = mem_angry_neochadanus

		create_leader = {
			class = ruler

			effect = {
				save_event_target_as = mem_new_ruler
				exile_leader_as = mem_new_ruler
			}
		}
		set_leader = mem_new_ruler

		if = {
			limit = {
				exists = heir
				heir = {
					is_same_species = event_target:mem_angry_neochadanus.species
				}
			}
			kill_leader = {
				type = ruler
				heir = yes
				show_notification = no
			}
		}

		country_event = { id = mem_lost_emperor.910 days = 180 random = 360 }
	}
	
	option = {
		name = mem_lost_emperor.801.option
		custom_tooltip = mem_lost_emperor.801.tooltip
	}
}


#Fallback in case is Neochadanus' Ascendancy and dies for some reason
country_event = {
	id = mem_lost_emperor.802
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		is_country_type = mem_neochadanus_ascendant
		NOT = {
			has_country_flag = mem_neochadanus_ascends
		}
	}
	
	immediate = {
		set_country_type = default
		change_government = {
			civics = random
		}
		if = {
			limit = {
				any_owned_pop = {
					mem_has_happiness = yes
					root = {
						pop_percentage = {
							percentage > 0.33
							limit = {
								is_same_value = prev
							}
						}
					}
				}
			}
			random_owned_pop = {
				limit = {
					mem_has_happiness = yes
					root = {
						pop_percentage = {
							percentage > 0.33
							limit = {
								is_same_value = prev
							}
						}
					}
				}
				root = {
					change_dominant_species = {
						species = prev.species
					}
				}
			}
		}
		else = {
			random_owned_pop = {
				limit = {
					mem_has_happiness = yes
				}
				root = {
					change_dominant_species = {
						species = prev.species
					}
				}
			}
		}
		if = {
			limit = {
				exists = ruler
			}
			kill_leader = {
				type = ruler
				show_notification = no
			}
		}
		create_leader = {
			class = ruler

			effect = {
				save_event_target_as = mem_new_ruler
				exile_leader_as = mem_new_ruler
			}
		}
		set_leader = mem_new_ruler
		
		if = {
			limit = {
				exists = heir
				heir = {
					is_same_species = from.species
				}
			}
			kill_leader = {
				type = ruler
				heir = yes
				show_notification = no
			}
		}

		#refresh the govt
		change_government = {
			authority = auth_dictatorial
		}
		change_government = {
			authority = auth_imperial
		}

		set_name = "Mourners of Neochadanus"

		every_relation = {
			country_event = { id = mem_lost_emperor.803 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.803
	title = mem_lost_emperor.803.name
	desc = mem_lost_emperor.803.desc
	picture = GFX_evt_space_funeral
	
	is_triggered_only = yes
	
	option = {
		name = mem_lost_emperor.803.option
	}
}

#50 years at least after you get Neochadanus
country_event = {
	id = mem_lost_emperor.900
	title = mem_lost_emperor.900.name
	desc = mem_lost_emperor.900.desc
	
	diplomatic = yes

	picture_event_data = {
		room = root.ruler
		portrait = event_target:mem_neochadanus
		planet_background = root
		graphical_culture = root
		city_level = root
	}

	mean_time_to_happen = {
		years = 10
	}

	trigger = {
		has_country_flag = mem_emperor_is_neochadanus
		ruler = {
			has_leader_flag = mem_neochadanus
		}
		NOR = {
			has_modifier = mem_lost_emperor_paying_for_ascension
			has_country_flag = mem_emperor_is_neochadanus_fifty
			has_country_flag = mem_neoch_decision
			any_country = {
				OR = {
					is_crisis_faction = yes
					
					AND = {
						OR = {
							is_country_type = default
							is_country_type = awakened_fallen_empire
						}
						has_communications = root
						relative_power = {
							who = root
							value = overwhelming
						}
					}
				}
			}
		}
		num_owned_planets > 1
	}

	immediate = {
		set_timed_country_flag = {
			flag = mem_neoch_decision
			days = 360
		}
		ruler = {
			save_event_target_as = mem_neochadanus
		}
	}
	
	option = {
		name = mem_lost_emperor.900.A

		add_modifier = {
			modifier = mem_lost_emperor_paying_for_ascension
			days = 3600
		}

		custom_tooltip = mem_lost_emperor.900.A.tooltip

		hidden_effect = {
			country_event = { id =  mem_lost_emperor.901 days = 3600 }
		}

		response_text = mem_lost_emperor.900.A.response
	}
	
	option = {
		name = mem_lost_emperor.900.B

		custom_tooltip = mem_lost_emperor.900.B.tooltip

		hidden_effect = {
			remove_country_flag = mem_emperor_is_neochadanus
			country_event = { id =  mem_lost_emperor.903 days = 180 random = 30 }
		}

		response_text = mem_lost_emperor.900.B.response
	}
}

#Successful ascension
country_event = {
	id = mem_lost_emperor.901
	title = mem_lost_emperor.901.name
	desc = mem_lost_emperor.901.desc

	diplomatic = yes

	picture_event_data = {
		room = root.ruler
		portrait = event_target:mem_neochadanus
		planet_background = root
		graphical_culture = root
		city_level = root
	}

	is_triggered_only = yes

	trigger = {
		has_country_flag = mem_emperor_is_neochadanus
		ruler = {
			has_leader_flag = mem_neochadanus
		}
	}
	
	immediate = {
		remove_country_flag = mem_emperor_is_neochadanus
		ruler = {
			save_event_target_as = mem_neochadanus
		}
		kill_leader = {
			type = ruler
			show_notification = no
		}
		create_leader = {
			class = ruler

			effect = {
				save_event_target_as = mem_new_ruler
				exile_leader_as = mem_new_ruler
			}
		}
		set_leader = mem_new_ruler

		if = {
			limit = {
				exists = heir
				heir = {
					is_same_species = event_target:mem_neochadanus.species
				}
			}
			kill_leader = {
				type = ruler
				heir = yes
				show_notification = no
			}
		}

		#refresh the govt
		change_government = {
			authority = auth_dictatorial
		}
		change_government = {
			authority = auth_imperial
		}
	}

	option = {
		name = mem_lost_emperor.901.option

		hidden_effect = {
			country_event = { id = mem_lost_emperor.902 }
		}
	}
}

country_event = {
	id = mem_lost_emperor.902
	title = mem_lost_emperor.902.name
	desc = mem_lost_emperor.902.desc
	picture = GFX_evt_psionics

	is_triggered_only = yes

	option = {
		name = mem_lost_emperor.902.option
	}
}


#Angry Neochadanus subchain

#Neochadanus disappears
country_event = {
	id = mem_lost_emperor.903
	title = mem_lost_emperor.903.name
	desc = mem_lost_emperor.903.desc
	picture = GFX_evt_throne_room

	is_triggered_only = yes

	immediate = {
		ruler = {
			save_event_target_as = mem_angry_neochadanus
		}
		exile_leader_as = mem_angry_neochadanus
		
		create_leader = {
			class = ruler

			effect = {
				save_event_target_as = mem_new_ruler
				exile_leader_as = mem_new_ruler
			}
		}
		set_leader = mem_new_ruler

		if = {
			limit = {
				exists = heir
				heir = {
					is_same_species = event_target:mem_angry_neochadanus.species
				}
			}
			kill_leader = {
				type = ruler
				heir = yes
				show_notification = no
			}
		}

		#refresh the govt
		change_government = {
			authority = auth_dictatorial
		}
		change_government = {
			authority = auth_imperial
		}

		country_event = { id = mem_lost_emperor.910 days = 135 random = 90 }
	}

	option = {
		name = mem_lost_emperor.903.option
		custom_tooltip = mem_lost_emperor.903.tooltip		
	}
}

#910 will let you reverse it incl. turn back to imperial authority. He is exiled as mem_angry_neochadanus

country_event = {
	id = mem_lost_emperor.910
	title = mem_lost_emperor.910.name
	desc = mem_lost_emperor.910.desc
	picture = GFX_evt_news_room

	is_triggered_only = yes

	option = {
		name = mem_lost_emperor.910.A

		custom_tooltip = mem_lost_emperor.910.A.tooltip

		add_modifier = {
			modifier = mem_lost_emperor_paying_for_ascension
			days = 3600
		}

		hidden_effect = {
			set_leader = mem_angry_neochadanus
			set_country_flag = mem_emperor_is_neochadanus

			#refresh the govt
			change_government = {
				authority = auth_dictatorial
			}
			change_government = {
				authority = auth_imperial
			}

			country_event = { id = mem_lost_emperor.901 days = 3600 }
		}
	}

	option = {
		name = mem_lost_emperor.910.B

		hidden_effect = {
			country_event = { id = mem_lost_emperor.999 days = 90 random = 90 }
		}
	}
}


#Portion of empire ascends

country_event = {
	id = mem_lost_emperor.999
	title = mem_lost_emperor.999.name
	desc = {
		text = mem_lost_emperor.999.desc.1planet
		trigger = {
			check_variable = {
				which = mem_lost_emperor_planets_count_2
				value = 1
			}
		}
	}
	desc = {
		text = mem_lost_emperor.999.desc.else
		trigger = {
			check_variable = {
				which = mem_lost_emperor_planets_count_2
				value > 1
			}
		}
	}
	picture = GFX_evt_exploding_planet

	is_triggered_only = yes

	trigger = {
		num_owned_planets > 1
	}

	immediate = {
		while = {
			limit = {
				any_owned_planet = {
					num_pops > 5
					NOT = {
						has_planet_flag = mem_lost_emperor_planet_counted
					}
				}
			}
			random_owned_planet = {
				limit = {
					num_pops > 5
					NOT = {
						has_planet_flag = mem_lost_emperor_planet_counted
					}
				}
				set_timed_planet_flag = {
					flag = mem_lost_emperor_planet_counted
					days = 3600
				}
			}
			change_variable = {
				which = mem_lost_emperor_planets_count
				value = @mem_lost_emperor_ascension_percentage
			}
		}
		if = {
			limit = {
				check_variable = {
					which = mem_lost_emperor_planets_count
					value < 1
				}
			}
			set_variable = {
				which = mem_lost_emperor_planets_count
				value = 1
			}
		}

		while = {
			limit = {
				check_variable = {
					which = mem_lost_emperor_planets_count
					value > 0.99
				}
				any_owned_planet = {
					is_capital = no
					NOT = { #that would just look weird (and getting rid of all 4 would be a bit harsh)
						is_planet_class = pc_ringworld_habitable
					}
					num_pops > 5
					NOT = {
						has_planet_flag = mem_lost_emperor_planet_to_disappear
					}
				}
			}
			random_owned_planet = {
				limit = {
					is_capital = no
					NOT = { #that would just look weird (and getting rid of all 4 would be a bit harsh)
						is_planet_class = pc_ringworld_habitable
					}
					num_pops > 5
					NOT = {
						has_planet_flag = mem_lost_emperor_planet_to_disappear
					}
				}
				if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 0
							}
						}
					}
					save_event_target_as = mem_disappeared_planet
				}
				if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 9
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_10
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 8
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_9
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 7
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_8
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 6
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_7
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 5
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_6
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 4
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_5
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 3
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_4
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 2
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_3
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value = 1
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_2
				}
				else_if = {
					limit = {
						root = {
							check_variable = {
								which = mem_lost_emperor_planets_count_2
								value < 1
							}
						}
					}
					save_event_target_as = mem_disappeared_planet_1
				}
				set_planet_flag = mem_lost_emperor_planet_to_disappear
#				remove_planet = yes
			}
			change_variable = {
				which = mem_lost_emperor_planets_count
				value = -1
			}
			change_variable = {
				which = mem_lost_emperor_planets_count_2
				value = 1
			}
		}
	}
	
	option = { #horrifying
		name = mem_lost_emperor.999.option
		if = {
			limit = {
				check_variable = {
					which = mem_lost_emperor_planets_count_2
					value = 1
				}
			}
			custom_tooltip = mem_lost_emperor.999.tooltip.1planet
		}
		else = {
			custom_tooltip = mem_lost_emperor.999.tooltip.else
		}

		hidden_effect = {
			every_owned_planet = {
				limit = {
					has_planet_flag = mem_lost_emperor_planet_to_disappear
				}
				destroy_colony = yes
				remove_planet = yes
			}
		}
	}
}


#Late additions: L-Gate Insights

country_event = {
	id = mem_lost_emperor.60
	title = mem_lost_emperor.60.name
	desc = mem_lost_emperor.60.desc
	picture = GFX_evt_l-gateway

	trigger = {
		has_country_flag = mem_emperor_is_neochadanus
		ruler = {
			has_leader_flag = mem_neochadanus
		}
		has_event_chain = "l_cluster_chain"
		NOT = { has_country_flag = mem_neochadanus_clue }
		NOT = { has_country_flag = completed_lcluster_chain }
	}

	mean_time_to_happen = {
		years = 20
	}

	immediate = {
		set_country_flag = mem_neochadanus_clue
	}

	option = {
		name = mem_lost_emperor.60.option
		generate_lcluster_clue = yes
	}
}

country_event = {
	id = mem_lost_emperor.61
	title = mem_lost_emperor.61.name
	desc = mem_lost_emperor.61.desc
	picture = GFX_evt_l-gateway

	trigger = {
		has_modifier = mem_lost_emperor_fount_of_knowledge_modifier
		has_event_chain = "l_cluster_chain"
		NOT = { has_country_flag = mem_neochadanus_clue }
		NOT = { has_country_flag = completed_lcluster_chain }
	}

	mean_time_to_happen = {
		years = 50
	}

	immediate = {
		set_country_flag = mem_neochadanus_clue
	}

	option = {
		name = mem_lost_emperor.61.option
		generate_lcluster_clue = yes
	}
}