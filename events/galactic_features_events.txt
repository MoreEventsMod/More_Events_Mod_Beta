#########################################
#
# Galactic Features Events
#
# Written by Henrik Thyrwall
#
#########################################

namespace = galactic_features

### Guardians of Zanaam
ship_event = {
	id = galactic_features.2
	title = "galactic_features.2.name"
	desc = "galactic_features.2.desc"
	
	diplomatic = yes
	
	is_triggered_only = yes
	
	picture_event_data = {
		room = no_video_feed_room
	}
	
	trigger = {
		FROM = { has_star_flag = guardians_of_zanaam }
		NOT = { has_global_flag = guardians_zanaam_destroyed }
	}
	
	immediate = {
		random_country = {
			limit = {
				is_country_type = faction
				has_country_flag = zanaam_country
			}
			establish_contact = { who = root.owner location = root.solar_system }
			establish_communications_no_message = root.owner
		}
	}
	
	option = {
		name = "galactic_features.2.a"
	}
}

# Guardians destroyed
country_event = {
	id = galactic_features.3
	hide_window = yes
	
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_global_flag = guardians_zanaam_destroyed }
		FROMFROM = { has_fleet_flag = zanaam_fleet }
	}
	
	immediate = {
		set_global_flag = guardians_zanaam_destroyed
	}
}

# Medieval Civilization
country_event = {
	id = galactic_features.101
	title = "primitive.1.name"
	desc = "galactic_features.101.desc"
	picture = GFX_evt_medieval_alien_civilization
	location = FROM
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
	}
}

# Industrial Civilization
country_event = {
	id = galactic_features.102
	title = "primitive.1.name"
	desc = "galactic_features.102.desc"
	picture = GFX_evt_metropolis
	location = FROM
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
	}
}

# Early Space Age Civilization
country_event = {
	id = galactic_features.103
	title = "primitive.1.name"
	desc = "galactic_features.103.desc"
	picture = GFX_evt_metropolis
	location = FROM
	
	is_triggered_only = yes
	
	option = {
		name = INTERESTING
	}
}

# Nuclear Wasteland
ship_event = {
	id = galactic_features.104
	title = "anomaly.670.name"
	desc = "galactic_features.104.desc"
	picture = GFX_evt_city_ruins
	location = FROM
	
	is_triggered_only = yes
	
	immediate = {
		create_species = {
			name = "NAME_Cockroach"
			plural = "Cockroaches"
			class = "ART"
			portrait = pre_art11
			traits = {
				ideal_planet_class = "pc_nuked"
				trait = trait_adaptive
				trait = random_presapient_trait
			}
			homeworld = FROM
			sapient = no
		}
		FROM = {
			create_pop = { species = last_created }
			create_pop = { species = last_created }
			create_pop = { species = last_created }
		}
		owner = { set_country_flag = found_presapients }
	}
	
	option = {
		name = INTERESTING
	}
}

# Shielded World port for conquering the system
country_event = {
	id = galactic_features.298
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		years_passed > 0 # On-action will cause errors running at game start
		from = {
			any_system_planet = {
				is_planet_class = pc_shielded
				has_planet_flag = fallen_shield_world
			}
		}
		NOT = { has_special_project = FALLEN_SHIELD_PROJECT }
	}

	immediate = {
		from = {
			random_system_planet = {
				limit = {
					is_planet_class = pc_shielded
					has_planet_flag = fallen_shield_world
				}
				planet_event = { id = galactic_features.299 }
			}
		}
	}
}

planet_event = {
	id = galactic_features.299
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		from = {
			random_owned_ship = {
				ship_event = { id = galactic_features.300 }
			}
		}
	}
}

# Shielded World (Fallen Empire)
ship_event = {
	id = galactic_features.300
	title = "galactic_features.300"
	desc = "galactic_features.300.desc"
	picture = GFX_evt_ship_in_orbit
	location = FROM
	trackable = yes
	
	is_triggered_only = yes
	
	trigger = {
		FROM = {
			is_planet_class = pc_shielded
			has_planet_flag = fallen_shield_world
		}
	}
	
	option = {
		name = "galactic_features.300.a"
		from = {
			enable_special_project = {
				name = "FALLEN_SHIELD_PROJECT"
				location = this
				owner = root.owner
			}
		}
	}
	option = {
		name = "galactic_features.300.b"
	}
}

# Mothballed Fleet
ship_event = {
	id = galactic_features.301
	title = "galactic_features.301"
	desc = "galactic_features.301.desc"
	picture = GFX_evt_federation_fleet
	location = FROMFROM
	
	is_triggered_only = yes
	
	immediate = {
		FROMFROM = {
			random_list = {
				50 = { change_pc = pc_barren }
				50 = { change_pc = pc_barren_cold }
			}
			reset_planet = yes
		}
		#MEM Planetary Shield Override
		IF = {
			limit = {
				NOT = {
					has_global_flag = mem_planetary_shield_worlds_OFF
				}
			}
			random_country = {
				country_event = { id = mem_planetary_shields.11 }
			}
		}
	}
	
	option = {
		name = "galactic_features.301.a"
		hidden_effect = {
			owner = {
				create_fleet = {
					effect = {
						while = {
							count = 4
							create_ship = {
								name = random
								design = "NAME_Beta"
								graphical_culture = "fallen_empire_01"
							}
						}
						while = {
							count = 6
							create_ship = {
								name = random
								design = "NAME_Gamma"
								graphical_culture = "fallen_empire_01"
							}
						}
						set_owner = root.owner
						set_location = FROMFROM
					}
				}
			}
		}
	}
}

# Tech Vault
ship_event = {
	id = galactic_features.302
	title = "galactic_features.302"
	desc = "galactic_features.302.desc"
	picture = GFX_evt_outpost
	location = FROMFROM
	
	is_triggered_only = yes
	
	immediate = {
		random_country = {
			limit = {
				is_country_type = fallen_empire
				has_country_flag = fallen_empire_1
			}
			save_event_target_as = fallen_empire
		}
		FROMFROM = { 
			random_list = {
				50 = { change_pc = pc_barren }
				50 = { change_pc = pc_barren_cold }
			}
			reset_planet = yes
		}
		#MEM Planetary Shield Override
		IF = {
			limit = {
				NOT = {
					has_global_flag = mem_planetary_shield_worlds_OFF
				}
			}
			random_country = {
				country_event = { id = mem_planetary_shields.11 }
			}
		}
	}
	
	option = {
		name = "galactic_features.302.a"
		owner = {
 			add_monthly_resource_mult = {
 				resource = engineering_research
 				value = @tier5researchreward
 				min = @tier5researchmin
 			}
 		}
	}
}

# Isolated Hut
ship_event = {
	id = galactic_features.303
	title = "galactic_features.303"
	desc = "galactic_features.303.desc"
	picture = GFX_evt_alien_planet
	location = FROMFROM
	
	is_triggered_only = yes
	
	immediate = {
		FROMFROM = {
			save_event_target_as = shield_planet
			random_list = {
				1 = { change_pc = pc_gaia }
				1 = { change_pc = pc_tropical }
				1 = { change_pc = pc_arid }
				1 = { change_pc = pc_continental }
				1 = { change_pc = pc_ocean }
				1 = { change_pc = pc_tundra }
				1 = { change_pc = pc_arctic }
				1 = { change_pc = pc_alpine }
				1 = { change_pc = pc_savannah }
				1 = { change_pc = pc_desert }
			}
			reroll_planet = yes
		}
		#MEM Planetary Shield Override
		IF = {
			limit = {
				NOT = {
					has_global_flag = mem_planetary_shield_worlds_OFF
				}
			}
			random_country = {
				country_event = { id = mem_planetary_shields.11 }
			}
		}
	}
	
	option = {
		name = "galactic_features.303.a"
		hidden_effect = {
			owner = {
				country_event = { id = galactic_features.304 }
			}
		}
	}
}

# The Admiral
country_event = {
	id = galactic_features.304
	title = "TRANSMISSION"
	desc = "galactic_features.304.desc"
	
	diplomatic = yes
	
	picture_event_data = {
		portrait = event_target:fallen_4_species
		planet_background = event_target:shield_planet
		city_level = event_target:shield_planet
	}
	
	is_triggered_only = yes
	
	option = {
		name = "galactic_features.304.a"
		response_text = "galactic_features.304.a.response"
		is_dialog_only = yes
	}
	option = {
		name = "galactic_features.304.b"
		response_text = "galactic_features.304.b.response"
		is_dialog_only = yes
	}
	option = {
		name = "galactic_features.304.c"
		response_text = "galactic_features.304.c.response"
		hidden_effect = {
			create_leader = {
				class = admiral
				species = event_target:fallen_4_species
				name = "NAME_Tuborek"
				skill = 10
				traits = {
					trait = leader_trait_gale_speed
					trait = leader_trait_fleet_logistician
					trait = leader_trait_resilient
				}
				event_leader = yes	# prevents this leader from leading factions and winning elections
			}
			last_created_leader = {
				set_age = 65
			}
		}
	}
	option = {
		name = "galactic_features.304.d"
		response_text = "galactic_features.304.d.response"
		hidden_effect = { event_target:shield_planet = { change_pc = pc_shielded } }
	}
}

# Freedom
ship_event = {
	id = galactic_features.305
	title = "galactic_features.305"
	desc = {
		trigger = { owner = { NOT = { has_authority = auth_machine_intelligence } } }
		text = "galactic_features.305.desc"
	}
	desc = {
		trigger = { owner = { has_authority = auth_machine_intelligence } }
		text = galactic_features.305.desc.mech
	}
	picture = GFX_evt_alien_planet
	location = FROMFROM
	
	is_triggered_only = yes
	
	immediate = {
		random_country = {
			limit = {
				is_country_type = fallen_empire
				has_country_flag = fallen_empire_1
			}
			save_event_target_as = fallen_empire
		}
		FROMFROM = { 
			random_list = {
				50 = { change_pc = pc_barren }
				50 = { change_pc = pc_barren_cold }
			}
			reset_planet = yes
		}
		#MEM Planetary Shield Override
		IF = {
			limit = {
				NOT = {
					has_global_flag = mem_planetary_shield_worlds_OFF
				}
			}
			random_country = {
				country_event = { id = mem_planetary_shields.11 }
			}
		}
		create_country = {
			name = "NAME_Old_One"
			type = cloud
		}
		last_created_country = {
			create_fleet = {
				name = "NAME_Exiled_One"
				effect = {
					set_owner = PREV
					create_ship = {
						name = "NAME_XELMAGGUS"
						design = "NAME_Cloud_Entity"
					}
					set_location = FROMFROM
			
					queue_actions = {
						repeat = {
							find_random_system = {
								trigger = {
									id = "galactic_features.305.trigger.1"
									has_planet_class = "pc_gas_giant"
									distance = {
										source = FROMFROM
										max_distance <= 200
										min_distance >= 100
									}
								}
								found_system = {
									move_to = THIS
								}	
							}
							find_closest_planet = {
								trigger = {
									id = "galactic_features.305.trigger.2"
									is_planet_class = "pc_gas_giant"
								}
								found_planet = {
									orbit_planet = THIS
									wait = {
										duration = 200
										random = 150
									}
								}
							}
						}
					}
				}
			}
			
			create_fleet = {
				name = "NAME_Exiled_One"
				effect = {
					set_owner = PREV
					create_ship = {
						name = "NAME_XILNIAK"
						design = "NAME_Cloud_Entity"
					}
					set_location = FROMFROM
			
					queue_actions = {
						repeat = {
							find_random_system = {
								trigger = {
									id = "galactic_features.305.trigger.3"
									has_planet_class = "pc_gas_giant"
									distance = {
										source = FROMFROMFROM
										max_distance <= 200
										min_distance >= 100
									}
								}
								found_system = {
									move_to = THIS
								}	
							}
							find_closest_planet = {
								trigger = {
									id = "galactic_features.305.trigger.4"
									is_planet_class = "pc_gas_giant"
								}
								found_planet = {
									orbit_planet = THIS
									wait = {
										duration = 200
										random = 150
									}
								}
							}
						}
					}
				}
			}
			
			create_fleet = {
				name = "NAME_Exiled_One"
				effect = {
					set_owner = PREV
					create_ship = {
						name = "NAME_XADRA"
						design = "NAME_Cloud_Entity"
					}
					set_location = FROMFROM
			
					queue_actions = {
						repeat = {
							find_random_system = {
								trigger = {
									id = "galactic_features.305.trigger.5"
									has_planet_class = "pc_gas_giant"
									distance = {
										source = FROMFROM
										max_distance <= 200
										min_distance >= 100
									}
								}
								found_system = {
									move_to = THIS
								}	
							}
							find_closest_planet = {
								trigger = {
									id = "galactic_features.305.trigger.6"
									is_planet_class = "pc_gas_giant"
								}
								found_planet = {
									orbit_planet = THIS
									wait = {
										duration = 200
										random = 150
									}
								}
							}
						}
					}
				}
			}
			
			create_fleet = {
				name = "NAME_Exiled_One"
				effect = {
					set_owner = PREV
					create_ship = {
						name = "NAME_XUNIA"
						design = "NAME_Cloud_Entity"
					}
					set_location = FROMFROM
			
					queue_actions = {
						repeat = {
							find_random_system = {
								trigger = {
									id = "galactic_features.305.trigger.7"
									has_planet_class = "pc_gas_giant"
									distance = {
										source = FROMFROM
										max_distance <= 200
										min_distance >= 100
									}
								}
								found_system = {
									move_to = THIS
								}	
							}
							find_closest_planet = {
								trigger = {
									id = "galactic_features.305.trigger.8"
									is_planet_class = "pc_gas_giant"
								}
								found_planet = {
									orbit_planet = THIS
									wait = {
										duration = 200
										random = 150
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	option = {
		name = "galactic_features.305.a"
	}
}

# The Sanctuary
ship_event = {
	id = galactic_features.350
	title = "galactic_features.350"
	desc = "galactic_features.350.desc"
	picture = GFX_evt_star_chart
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		FROM = { 
			has_star_flag = sanctuary_system
			any_fleet_in_system = {
				has_fleet_flag = sanctuary_core
			}
			any_system_planet = {
				exists = owner
				owner = { is_country_type = primitive }
			}
		}
	}
	
	immediate = {
		owner = { 
			establish_communications_no_message = event_target:sanctuary
		}
	}
	
	option = {
		name = "ONSCREEN"
		hidden_effect = {
			owner = { country_event = { id = galactic_features.351 } }
		}
	}
	option = {
		name = "galactic_features.350.b"
	}
}

# Sanctuary Transmission
country_event = {
	id = galactic_features.351
	title = "TRANSMISSION"
	desc = "galactic_features.351.desc"
	
	diplomatic = yes
	
	picture_event_data = {
		room = no_video_feed_room
	}
	
	is_triggered_only = yes
	
	option = {
		name = "galactic_features.351.a"
		response_text = "galactic_features.351.a.response"
		is_dialog_only = yes
	}
	option = {
		name = "galactic_features.351.b"
		response_text = "galactic_features.351.b.response"
		is_dialog_only = yes
	}
	option = {
		name = "galactic_features.351.c"
		response_text = "galactic_features.351.c.response"
	}
}

# If Void Cloud fleet destroys two fleets, a new Void Cloud is created
country_event = {
	id = galactic_features.360
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = from
		is_country_type = cloud
	}

	immediate = {
		from = { save_event_target_as = notify_country }
		fromfrom = {
			solar_system = {
				random_system_planet = {
					limit = { is_star = yes }
					save_event_target_as = parent_cloud
				}
			}
			if = {
				limit = {
					check_variable = { 
						which = "cloud_strength" 
						value < 1
					}
				}
				set_variable = {
					which = "cloud_strength"
					value = 1
				}
			}
			else = {
				change_variable = {
					which = "cloud_strength"
					value = 1
				}
				if = {
					limit = {
						check_variable = {
							which = "cloud_strength"
							value = 2
						}
					}
					random_list = {
						25 = {
							create_fleet = {
								name = "NAME_Effluvial_Offspring"
								effect = {
									set_owner = root
									create_ship = {
										name = "NAME_SHAB"
										design = "NAME_Cloud_Entity"
									}
									set_location = event_target:parent_cloud
								}
							}
							event_target:notify_country = { country_event = { id = galactic_features.361 } }
						}
						25 = {
							create_fleet = {
								name = "NAME_Effluvial_Offspring"
								effect = {
									set_owner = root
									create_ship = {
										name = "NAME_TAHA"
										design = "NAME_Cloud_Entity"
									}
									set_location = event_target:parent_cloud
								}
							}
							event_target:notify_country = { country_event = { id = galactic_features.361 } }
						}
						25 = {
							create_fleet = {
								name = "NAME_Effluvial_Offspring"
								effect = {
									set_owner = root
									create_ship = {
										name = "NAME_TANT"
										design = "NAME_Cloud_Entity"
									}
									set_location = event_target:parent_cloud
								}
							}
							event_target:notify_country = { country_event = { id = galactic_features.361 } }
						}
						25 = {
							create_fleet = {
								name = "NAME_Effluvial_Offspring"
								effect = {
									set_owner = root
									create_ship = {
										name = "NAME_KASH"
										design = "NAME_Cloud_Entity"
									}
									set_location = event_target:parent_cloud
								}
							}
							event_target:notify_country = { country_event = { id = galactic_features.361 } }
						}
					}
					change_variable = {
						which = "cloud_strength"
						value = -2
					}
				}
			}
		}
	}
}

# Void Cloud reproduction notification event
country_event = {
	id = galactic_features.361
	title = galactic_features.361.name
	desc = galactic_features.361.desc
	picture = GFX_evt_wormhole
	location = fromfromfrom

	is_triggered_only = yes

	trigger = {
		is_ai = no
		is_country_type = default
		has_communications = from
	}

	option = {
		name = galactic_features.361.a
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_pacifist
				NOR = {
					has_ethic = ethic_fanatic_pacifist
					has_ethic = ethic_fanatic_militarist
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_fanatic_spiritualist
					has_ethic = ethic_fanatic_materialist
					has_authority = auth_machine_intelligence
				}
			}
		}
	}

	option = {
		name = galactic_features.361.a.milit
		trigger = {	has_ethic = ethic_fanatic_militarist }
	}

	option = {
		name = galactic_features.361.a.phobe
		trigger = { OR = { has_ethic = ethic_fanatic_xenophobe has_civic = civic_machine_terminator } }
	}

	option = {
		name = galactic_features.361.a.phile
		trigger = { has_ethic = ethic_fanatic_xenophile }
	}

	option = {
		name = galactic_features.361.a.spiri
		trigger = { has_ethic = ethic_fanatic_spiritualist }
	}

	option = {
		name = galactic_features.361.a.mater
		trigger = {
			OR = {
				has_ethic = ethic_fanatic_materialist
				AND = {
					has_authority = auth_machine_intelligence
					NOT = { has_civic = civic_machine_terminator }
				}
			}
		}
	}
}

# Space Monster respawn
event = {
	id = galactic_features.362
	hide_window = yes

	is_triggered_only = yes
 
	immediate = {
		random_system = {
			limit = {
				has_star_flag = blue_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = { is_star = no }
				create_crystal_country = yes
				event_target:crystal_country = {
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Blue"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 150
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = blue2_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}
			
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = blue2_trigger_1
			}
			random_system_planet = {
				limit = {
					is_star = no
					NOT = {
						is_same_value = event_target:blue2_trigger_1
					}
				}
				save_event_target_as = blue2_trigger_2
			}
			random_system_planet = {
				limit = {
					is_star = no
					NOR = {
						is_same_value = event_target:blue2_trigger_1
						is_same_value = event_target:blue2_trigger_2
					}
				}
				save_event_target_as = blue2_trigger_3
				create_crystal_country = yes
				event_target:crystal_country = {
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Blue"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 150
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Blue"
							}
							set_location = event_target:blue2_trigger_2
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 150
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Blue"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Blue"
							}
							set_location = event_target:blue2_trigger_1
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 150
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = green_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
				}
				save_event_target_as = green_trigger_1
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOT = {
						is_same_value = event_target:green_trigger_1
					}
				}
				save_event_target_as = green_trigger_2
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOR = {
						is_same_value = event_target:green_trigger_1
						is_same_value = event_target:green_trigger_2
					}
				}
				save_event_target_as = green_trigger_3
				create_crystal_country = yes
				event_target:crystal_country = {
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 100
							queue_actions = {
								repeat = {
									find_closest_planet = {
										trigger = {
											id = "greenC.x1.trigger.1"
											is_planet = event_target:green_trigger_1
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC.x1.trigger.2"
											is_planet = event_target:green_trigger_2
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC.x1.trigger.3"
											is_planet = event_target:green_trigger_3
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
								}
							}
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = green2_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = green2_trigger_1
			}
			random_system_planet = {
				limit = {
					is_star = no
					NOT = {
						is_same_value = event_target:green2_trigger_1
					}
				}
				save_event_target_as = green2_trigger_2
			}
			random_system_planet = {
				limit = {
					is_star = no
					NOR = {
						is_same_value = event_target:green2_trigger_1
						is_same_value = event_target:green2_trigger_2
					}
				}
				save_event_target_as = green2_trigger_3
				create_crystal_country = yes
				event_target:crystal_country = {
					save_event_target_as = green2_owner
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Iota"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Mu"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							set_location = event_target:green2_trigger_3
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 40
							queue_actions = {
								repeat = {
									find_closest_planet = {
										trigger = {
											id = "greenC2.x1.trigger.1"
											is_planet = event_target:green2_trigger_1
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x1.trigger.2"
											is_planet = event_target:green2_trigger_2
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x1.trigger.3"
											is_planet = event_target:green2_trigger_3
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Iota"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Mu"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							set_location = event_target:green2_trigger_1
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 40
							queue_actions = {
								repeat = {
									find_closest_planet = {
										trigger = {
											id = "greenC2.x2.trigger.2"
											is_planet = event_target:green2_trigger_2
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x2.trigger.3"
											is_planet = event_target:green2_trigger_3
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x2.trigger.1"
											is_planet = event_target:green2_trigger_1
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Iota"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							create_ship = {
								name = "NAME_Mu"
								design = "NAME_Small_Crystal_Entity_Green"
							}
							set_location = event_target:green2_trigger_2
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 40
							queue_actions = {
								repeat = {
									find_closest_planet = {
										trigger = {
											id = "greenC2.x3.trigger.3"
											is_planet = event_target:green2_trigger_3
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x3.trigger.1"
											is_planet = event_target:green2_trigger_1
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
									find_closest_planet = {
										trigger = {
											id = "greenC2.x3.trigger.2"
											is_planet = event_target:green2_trigger_2
										}
										found_planet = {
											orbit_planet = THIS
										}
									}
								}
							}
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = red_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
				}
				save_event_target_as = red_trigger_1
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOT = {
						is_same_value = event_target:red_trigger_1
					}
				}
				save_event_target_as = red_trigger_2
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOR = {
						is_same_value = event_target:red_trigger_1
						is_same_value = event_target:red_trigger_2
					}
				}
				save_event_target_as = red_trigger_3
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOR = {
						is_same_value = event_target:red_trigger_1
						is_same_value = event_target:red_trigger_2
						is_same_value = event_target:red_trigger_3
					}
				}
				save_event_target_as = red_trigger_4
				create_crystal_country = yes
				event_target:crystal_country = {
					save_event_target_as = red_crystals
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							set_location = event_target:red_trigger_1
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 40
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 30
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							set_location = event_target:red_trigger_2
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 40
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							set_location = event_target:red_trigger_3
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 30
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Alpha"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							set_location = event_target:red_trigger_4
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = red2_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
				}
				save_event_target_as = red2_trigger_1
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOT = {
						is_same_value = event_target:red2_trigger_1
					}
				}
				save_event_target_as = red2_trigger_2
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOR = {
						is_same_value = event_target:red2_trigger_1
						is_same_value = event_target:red2_trigger_2
					}
				}
				save_event_target_as = red2_trigger_3
			}
			random_system_planet = {
				limit = {
					is_star = no
					is_moon = no
					NOR = {
						is_same_value = event_target:red2_trigger_1
						is_same_value = event_target:red2_trigger_2
						is_same_value = event_target:red2_trigger_3
					}
				}
				save_event_target_as = red2_trigger_4
				create_crystal_country = yes
				event_target:crystal_country = {
					save_event_target_as = red2_crystals
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Omicron"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Kappa"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Lambda"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Tau"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							set_location = event_target:red2_trigger_1
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 100
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Omicron"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Kappa"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Lambda"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Tau"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							set_location = event_target:red2_trigger_2
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 100
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Omicron"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Kappa"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Lambda"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Tau"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							set_location = event_target:red2_trigger_3
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 100
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Entity"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Alpha"
								design = "NAME_Large_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Omicron"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Kappa"
								design = "NAME_Medium_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Lambda"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							create_ship = {
								name = "NAME_Tau"
								design = "NAME_Small_Crystal_Entity_Red"
							}
							set_location = event_target:red2_trigger_4
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 100
							queue_actions = {
								repeat = {
									wait = {
										duration = 9999
									}
								}
							}
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = elite_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = crystal }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}
			
			random_system_planet = {
				limit = { is_star = yes }
				create_crystal_country = yes
				event_target:crystal_country = {
					save_event_target_as = elite1_owner
					create_fleet = {
						name = "NAME_Crystalline_Elites"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Red_Elite"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Blue_Elite"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Beta"
								design = "NAME_Large_Crystal_Entity_Blue_Elite"
							}
							create_ship = {
								name = "NAME_Gamma"
								design = "NAME_Medium_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Psi"
								design = "NAME_Small_Crystal_Entity_Red_Elite"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 500
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Elites"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Red_Elite"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Blue_Elite"
							}
							create_ship = {
								name = "NAME_Beta"
								design = "NAME_Large_Crystal_Entity_Red_Elite"
							}
							create_ship = {
								name = "NAME_Gamma"
								design = "NAME_Medium_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Psi"
								design = "NAME_Small_Crystal_Entity_Blue_Elite"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 500
						}
					}
					create_fleet = {
						name = "NAME_Crystalline_Elites"
						effect = {
							set_owner = event_target:crystal_country
							create_ship = {
								name = "NAME_Delta"
								design = "NAME_Large_Crystal_Entity_Blue_Elite"
							}
							create_ship = {
								name = "NAME_Epsilon"
								design = "NAME_Medium_Crystal_Entity_Red_Elite"
							}
							create_ship = {
								name = "NAME_Omega"
								design = "NAME_Small_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Beta"
								design = "NAME_Large_Crystal_Entity_Yellow_Elite"
							}
							create_ship = {
								name = "NAME_Gamma"
								design = "NAME_Medium_Crystal_Entity_Blue_Elite"
							}
							create_ship = {
								name = "NAME_Psi"
								design = "NAME_Small_Crystal_Entity_Red_Elite"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 500
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = void_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = cloud }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = { is_star = no }
				create_cloud_country = yes
				event_target:cloud_country = {
					set_aggro_range = 500
					create_fleet = {
						name = "NAME_Void_Cloud"
						effect = {
							set_owner = event_target:cloud_country
							create_ship = {
								name = "NAME_XUUL"
								design = "NAME_Cloud_Entity"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 500
						}
					}
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = amoeba_1_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = amoeba }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = { is_star = no }
				create_amoeba_country = yes
				event_target:amoeba_country = {
					create_fleet = {
						name = "NAME_Space_Amoeba"
						effect = {
							set_owner = event_target:amoeba_country
							create_ship = {
								name = "NAME_Ortus"
								design = "NAME_Large_Space_Organism_Orange"
							}
							create_ship = {
								name = "NAME_Oriens"
								design = "NAME_Large_Space_Organism_Orange"
							}
							create_ship = {
								name = "NAME_Cortus"
								design = "NAME_Large_Space_Organism_Orange"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 100
						}
					}
					every_country = { #just in case
						limit = { has_modifier = pacified_amoebas }
						prev = {
							set_faction_hostility = {
								set_hostile = no
								set_neutral = yes
								target = prev
							}
						}
					}
				}
			}
		}


		random_system = {
			limit = {
				has_star_flag = amoeba_2_system
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = amoeba }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = { is_star = no }
				save_event_target_as = grazing_grounds
				create_amoeba_country = yes
				event_target:amoeba_country = {
					create_fleet = {
						name = "NAME_Space_Amoeba"
						effect = {
							set_owner = event_target:amoeba_country
							random_list = {
								10 = {
									set_fleet_flag = empire_visitor
								}
								20 = {
									set_fleet_flag = tiyanki_hunter
								}
								70 = {
									set_fleet_flag = empty_system
								}
							}
							create_ship = {
								name = "NAME_Ortus"
								design = "NAME_Great_Space_Organism"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = self
							set_aggro_range = 20

							#if = {
							#	limit = { has_fleet_flag = empire_visitor }
								#queue_actions = {
								#	repeat = {
								#		find_random_system = {
								#			trigger = {
								#				id = amoeba.x3.trigger.1
								#				any_system_planet = { is_capital = yes }
								#			}
								#			found_system = {
								#				move_to = this
								#			}
								#		}
								#		find_closest_planet = {
								#			trigger = {
								#				id = amoeba.x3.trigger.2
								#				is_star = yes
								#			}
								#			found_planet = {
								#				orbit_planet = this
								#				wait = {
								#					duration = 30
								#					random = 10
								#				}
								#			}
								#		}
								#		find_random_system = {
								#			trigger = {
								#				id = amoeba.x3.trigger.3
								#				closest_system = {
								#					any_system_planet = {
								#						is_planet = event_target:grazing_grounds
								#					}
								#				}
								#			}
								#		}
								#		find_closest_planet = {
								#			trigger = {
								#				id = amoeba.x3.trigger.4
								#				is_planet = event_target:grazing_grounds
								#			}
								#			found_planet = {
								#				orbit_planet = this
								#				wait = {
								#					duration = 400
								#					random = 150
								#				}
								#			}
								#		}
								#	}
								#}
								#else = {
								#	if = {
								#		limit = { has_fleet_flag = tiyanki_hunter }
								#		save_event_target_as = hunting_amoeba
								#		queue_actions = {
								#			repeat = {
								#				find_random_system = {
								#					trigger = {
								#						id = amoeba.x2.trigger.1
								#						closest_system = {
								#							any_ship_in_system = {
								#								is_ship_size = space_whale_3
								#								# hunt calves
								#							}
								#						}
								#					}
								#					found_system = {
								#						move_to = this
								#					}
								#				}
								#				find_closest_planet = {
								#					trigger = {
								#						id = amoeba.x2.trigger.2
								#						is_star = yes
								#					}
								#					found_planet = {
								#						effect = { 
								#							id = amoeba.x2.effect.1
								#							event_target:hunting_amoeba = { set_aggro_range = 500 }
								#						}
								#						orbit_planet = this
								#						wait = {
								#							duration = 300
								#							random = 10
								#						}
								#					}
								#				}
								#				find_random_system = {
								#					trigger = {
								#						id = amoeba.x2.trigger.3
								#						closest_system = {
								#							any_system_planet = {
								#								is_planet = event_target:grazing_grounds
								#							}
								#						}
								#					}
								#					found_system = {
								#						move_to = this
								#					}
								#				}
								#				find_closest_planet = {
								#					trigger = {
								#						id = amoeba.x2.trigger.4
								#						is_planet = event_target:grazing_grounds
								#					}
								#					found_planet = {
								#						effect = { 
								#							id = amoeba.x2.effect.2
								#							event_target:hunting_amoeba = { set_aggro_range = 40 }
								#						}
								#						orbit_planet = this
								#						wait = {
								#							duration = 400
								#							random = 150
								#						}
								#					}
								#				}
								#			}
								#		}
								#		else = {
								#			queue_actions = {
								#				repeat = {
								#					find_random_system = {
								#						trigger = {
								#							id = amoeba.x1.trigger.1
								#							closest_system = {
								#								NOT = { has_star_flag = hostile_system }
								#							}
								#						}
								#						found_system = {
								#							move_to = this
								#						}
								#					}
								#					find_closest_planet = {
								#						trigger = {
								#							id = amoeba.x1.trigger.2
								#							is_star = yes
								#						}
								#						found_planet = {
								#							orbit_planet = this
								#							wait = {
								#								duration = 100
								#								random = 50
								#							}
								#						}
								#					}
								#					find_random_system = {
								#						trigger = {
								#							id = amoeba.x1.trigger.3
								#							closest_system = {
								#								any_system_planet = {
								#									is_planet = event_target:grazing_grounds
								#								}
								#							}
								#						}
								#					}
								#					find_closest_planet = {
								#						trigger = {
								#							id = amoeba.x1.trigger.4
								#							is_planet = event_target:grazing_grounds
								#						}
								#						found_planet = {
								#							orbit_planet = this
								#							wait = {
								#								duration = 300
								#								random = 50
								#							}
								#						}
								#					}
								#				}
								#			}
								#		}
								#	}
								#}
							#}
						}
					}
					every_country = { #just in case
						limit = { has_modifier = pacified_amoebas }
						prev = {
							set_faction_hostility = {
								set_hostile = no
								set_neutral = yes
								target = prev
							}
						}
					}
				}
			}
		}


		random_system = {
			limit = {
				has_star_flag = drone_system_1
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = drone }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			random_system_planet = {
				limit = { has_deposit_for = shipclass_mining_station }
				create_drone_country = yes
				event_target:drone_country = {
					save_event_target_as = mining_drones
					set_graphical_culture = ancient_drone_01
					create_fleet = {
						name = "NAME_Ancient_Mining_Drones"
						effect = {
							set_owner = event_target:drone_country
							create_ship = {
								name = "NAME_Drone_2432-D"
								design = "NAME_Ancient_Mining_Drone"
							}
							create_ship = {
								name = "NAME_Drone_7731-A"
								design = "NAME_Ancient_Mining_Drone"
							}
							create_ship = {
								name = "NAME_Drone_4119-X"
								design = "NAME_Ancient_Combat_Drone"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 150
							queue_actions = {
								repeat = {
									wait = {
										duration = 999
										random = 10
									}
								}
							}
						}
					}
				}
				create_mining_station = {
					owner = event_target:mining_drones
				}
			}
		}

		random_system = {
			limit = {
				has_star_flag = drone_system_2
				NOR = {
					any_fleet_in_system = {
						exists = owner
						owner = { is_country_type = drone }
					}
					any_country = {
						intel_level = {
							level > low
							system = prev
						}
					}
				}
			}

			every_system_planet = {
				limit = { has_deposit_for = shipclass_mining_station }
				create_drone_country = yes
				event_target:drone_country = {
					save_event_target_as = mining_drones2
					set_graphical_culture = ancient_drone_01
					create_fleet = {
						name = "NAME_Ancient_Mining_Drones"
						effect = {
							set_owner = event_target:drone_country
							create_ship = {
								name = "NAME_Drone_1832-D"
								design = "NAME_Ancient_Mining_Drone"
							}
							create_ship = {
								name = "NAME_Drone_0931-F"
								design = "NAME_Ancient_Combat_Drone"
							}
							create_ship = {
								name = "NAME_Drone_1119-X"
								design = "NAME_Ancient_Combat_Drone"
							}
							set_location = PREVPREV
							set_fleet_stance = aggressive
							set_aggro_range_measure_from = return_point
							set_aggro_range = 200
						}
					}
				}
				create_mining_station = {
					owner = event_target:mining_drones2
				}
			}
		}

		if = {
			limit = {
				any_playable_country = {
					has_modifier = pacified_amoebas
					any_system_within_border = {
						NOT = {
							any_system_planet = {
								is_colony = yes
							}
						}
						NOT = {
							any_fleet_in_system = {
								owner = {
									OR = {
										is_country_type = amoeba
										is_country_type = amoeba_borderless
										is_country_type = amoeba_garrison
									}
								}
							}
						}
					}
					OR = {
						count_system_within_border = {
							count <= 2
							limit = {
								any_fleet_in_system = {
									owner = {
										OR = {
											is_country_type = amoeba
											is_country_type = amoeba_borderless
											is_country_type = amoeba_garrison
										}
									}
								}
							}
						}
						AND = {
							count_system_within_border = {
								count > 40
							}
							count_system_within_border = {
								count <= 3
								limit = {
									any_fleet_in_system = {
										owner = {
											OR = {
												is_country_type = amoeba
												is_country_type = amoeba_borderless
												is_country_type = amoeba_garrison
											}
										}
									}
								}
							}
						}
					}
				}
			}
			every_playable_country = {
				limit = {
					has_modifier = pacified_amoebas
					any_system_within_border = {
						num_planets_in_system > 1
						NOT = {
							any_system_planet = {
								is_colony = yes
							}
						}
						NOT = {
							any_fleet_in_system = {
								owner = {
									OR = {
										is_country_type = amoeba
										is_country_type = amoeba_borderless
										is_country_type = amoeba_garrison
									}
								}
							}
						}
					}
					OR = {
						count_system_within_border = {
							count <= 2
							limit = {
								any_fleet_in_system = {
									owner = {
										OR = {
											is_country_type = amoeba
											is_country_type = amoeba_borderless
											is_country_type = amoeba_garrison
										}
									}
								}
							}
						}
						AND = {
							count_system_within_border = {
								count > 40
							}
							count_system_within_border = {
								count <= 3
								limit = {
									any_fleet_in_system = {
										owner = {
											OR = {
												is_country_type = amoeba
												is_country_type = amoeba_borderless
												is_country_type = amoeba_garrison
											}
										}
									}
								}
							}
						}
					}
				}
				random_system_within_border = {
					limit = {
						num_planets_in_system > 1
						NOT = {
							any_system_planet = {
								is_colony = yes
							}
						}
						NOT = {
							any_fleet_in_system = {
								owner = {
									OR = {
										is_country_type = amoeba
										is_country_type = amoeba_borderless
										is_country_type = amoeba_garrison
									}
								}
							}
						}
					}
					random_system_planet = {
						limit = { is_star = no }
						create_amoeba_country = yes
						event_target:amoeba_country = {
							create_fleet = {
								name = "NAME_Space_Amoeba"
								effect = {
									set_owner = event_target:amoeba_country
									random_list = { #different coloured amoebas
										1 = {
											create_ship = {
												name = "NAME_Ortus"
												design = "NAME_Large_Space_Organism_Orange"
											}
											create_ship = {
												name = "NAME_Oriens"
												design = "NAME_Large_Space_Organism_Orange"
											}
											create_ship = {
												name = "NAME_Cortus"
												design = "NAME_Large_Space_Organism_Orange"
											}
										}
										1 = {
											create_ship = {
												name = "NAME_Ortus"
												design = "NAME_Large_Space_Organism_Teal"
											}
											create_ship = {
												name = "NAME_Oriens"
												design = "NAME_Large_Space_Organism_Teal"
											}
											create_ship = {
												name = "NAME_Cortus"
												design = "NAME_Large_Space_Organism_Teal"
											}
										}
										1 = {
											create_ship = {
												name = "NAME_Ortus"
												design = "NAME_Large_Space_Organism_Blue"
											}
											create_ship = {
												name = "NAME_Oriens"
												design = "NAME_Large_Space_Organism_Blue"
											}
											create_ship = {
												name = "NAME_Cortus"
												design = "NAME_Large_Space_Organism_Blue"
											}
										}
										1 = {
											create_ship = {
												name = "NAME_Ortus"
												design = "NAME_Large_Space_Organism_Zebra"
											}
											create_ship = {
												name = "NAME_Oriens"
												design = "NAME_Large_Space_Organism_Zebra"
											}
											create_ship = {
												name = "NAME_Cortus"
												design = "NAME_Large_Space_Organism_Zebra"
											}
										}
									}
									set_location = PREVPREV
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = self
									set_aggro_range = 100
									queue_actions = {
										wait = {
											duration = 10
											random = 3
										}
									}
								}
							}
							every_country = { #just in case
								limit = {
									has_modifier = pacified_amoebas
								}
								prev = {
									set_faction_hostility = {
										set_hostile = no
										set_neutral = yes
										target = prev
									}
								}
							}
						}
					}
				}
			}
		}
		if = {
			limit = {
				years_passed > 48
				NOT = { has_global_flag = amoeba_garrison_spawn_cooldown }
				NOT = { has_global_flag = no_more_amoeba_garrison_spawns }
				exists = event_target:amoeba_home_system
				event_target:amoeba_home_system = {
					any_fleet_in_system = {
						owner = { is_country_type = amoeba_garrison }
					}
					OR = {
						exists = space_owner #pacified amoebas
						count_fleet_in_system = {
							count = 0
							limit = {
								owner = {
									NOT = { is_country_type = amoeba_garrison }
								}
							}
						}
					}
				}
			}
			random = {
				chance = 33
				event_target:amoeba_home_system = {
					if = {
						limit = {
							has_star_flag = amoeba_swarm_1
						}
						remove_star_flag = amoeba_swarm_1
						set_global_flag = no_more_amoeba_garrison_spawns
					}
					else = {
						set_star_flag = amoeba_swarm_1
						set_timed_global_flag = {
							flag = amoeba_garrison_spawn_cooldown
							days = 6000
						}
					}
					random_system_planet = {
						limit = { is_star = no }
						create_amoeba_country_borderless = yes
						event_target:amoeba_country_borderless = {
							create_fleet = {
								name = "NAME_Amoeba_Swarm"
								effect = {
									set_owner = event_target:amoeba_country_borderless
									random_list = { #different coloured amoebas
										1 = {
											while = {
												count = 5
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Zebra"
												}
											}
											while = {
												count = 15
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Zebra"
												}
											}
											if = {
												limit = {
													years_passed > 79
												}
												while = {
													count = 3
													create_ship = {
														name = ""
														design = "NAME_Large_Space_Organism_Zebra"
													}
												}
												while = {
													count = 9
													create_ship = {
														name = ""
														design = "NAME_Small_Space_Organism_Zebra"
													}
												}
											}
										}
										1 = {
											while = {
												count = 5
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Teal"
												}
											}
											while = {
												count = 15
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Teal"
												}
											}
											if = {
												limit = {
													years_passed > 79
												}
												while = {
													count = 3
													create_ship = {
														name = ""
														design = "NAME_Large_Space_Organism_Teal"
													}
												}
												while = {
													count = 9
													create_ship = {
														name = ""
														design = "NAME_Small_Space_Organism_Teal"
													}
												}
											}
										}
										1 = {
											while = {
												count = 5
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Blue"
												}
											}
											while = {
												count = 15
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Blue"
												}
											}
											if = {
												limit = {
													years_passed > 79
												}
												while = {
													count = 3
													create_ship = {
														name = ""
														design = "NAME_Large_Space_Organism_Blue"
													}
												}
												while = {
													count = 9
													create_ship = {
														name = ""
														design = "NAME_Small_Space_Organism_Blue"
													}
												}
											}
										}
										1 = {
											while = {
												count = 5
												create_ship = {
													name = ""
													design = "NAME_Large_Space_Organism_Orange"
												}
											}
											while = {
												count = 15
												create_ship = {
													name = ""
													design = "NAME_Small_Space_Organism_Orange"
												}
											}
											if = {
												limit = {
													years_passed > 79
												}
												while = {
													count = 3
													create_ship = {
														name = ""
														design = "NAME_Large_Space_Organism_Orange"
													}
												}
												while = {
													count = 9
													create_ship = {
														name = ""
														design = "NAME_Small_Space_Organism_Orange"
													}
												}
											}
										}
									}
									set_location = PREVPREV
									set_fleet_stance = aggressive
									set_aggro_range_measure_from = self
									set_aggro_range = 100
									set_fleet_flag = amoeba_home_wave

									queue_actions = {
										find_random_system = {
											trigger = {
												id = "amoeba_swarm.1"
												distance = {
													source = event_target:amoeba_home_system
													min_jumps = 10
												}
											}
											found_system = {
												move_to = this
											}
										}
									}
								}
							}
							every_country = { #just in case
								limit = { has_modifier = pacified_amoebas }
								prev = {
									set_faction_hostility = {
										set_hostile = no
										set_neutral = yes
										target = prev
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

# Tiyanki Respawn
event = {
	id = galactic_features.365
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = tiyanki_home_cleared }
		exists = event_target:tiyanki_spawn_system
		any_country = {
			OR = {
				is_country_type = tiyanki
				is_country_type = tiyanki_garrison
			}
			OR = {
				AND = {
					galaxy_size = tiny
					num_fleets < 1
				}
				AND = {
					galaxy_size = small
					num_fleets < 2
				}
				AND = {
					galaxy_size = medium
					num_fleets < 4
				}
				AND = {
					galaxy_size = large
					num_fleets < 6
				}
				AND = {
					galaxy_size = huge
					num_fleets < 8
				}
			}
		}
	}

	immediate = {
		random_list = {
			5 = {
				event_target:tiyanki_spawn_system = {
					random_system_planet = {
						limit = { 
							OR = {
								has_planet_flag = tiyanki_giant1
								has_planet_flag = tiyanki_giant2
								has_planet_flag = tiyanki_giant3
								has_planet_flag = tiyanki_giant4
							}
						}
						save_event_target_as = giant
					}
				}
				random_list = {
					10 = { create_tiyanki_fleet_1 = yes }
					10 = { create_tiyanki_fleet_2 = yes }
					10 = { create_tiyanki_fleet_3 = yes }
					10 = { create_tiyanki_fleet_4 = yes }
					10 = { create_tiyanki_fleet_5 = yes }
				}
			}
			150 = {}
		}
	}
}

# Tiyanki Home System Destroyed
country_event = {
	id = galactic_features.366
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = tiyanki_garrison
		num_ships = 0
	}

	immediate = {
		set_global_flag = tiyanki_home_cleared
		from = { save_event_target_as = tiyanki_killer }
		random_system = {
			limit = { has_star_flag = tiyanki_spawn_system }
			save_event_target_as = tiyanki_system
		}
		every_playable_country = {
			limit = {
				is_ai = no
				intel_level = {
					level > none
					system = event_target:tiyanki_system
				}
			}
			country_event = { id = galactic_features.367 }
		}
	}
}

# Tiyanki Home System Destroyed - Informed
country_event = {
	id = galactic_features.367
	title = "galactic_features.367.name"
	desc = {
		trigger = {
			any_country = {
				is_country_type = tiyanki
				num_fleets > 0
			}
		}
		text = "galactic_features.367.a.desc"
	}
	desc = {
		trigger = {
			has_global_flag = tiyanki_extinct
		}
		text = "galactic_features.367.b.desc"
	}
	desc = {
		trigger = {
			NOT = {
				any_country = {
					is_country_type = tiyanki
					num_fleets > 0
				}
			}
			any_system = { has_star_flag = elderly_tiyanki_system }
			exists = event_target:elderly_tiyanki_fleet
			exists = event_target:elderly_tiyanki_country
		}
		text = "galactic_features.367.c.desc"
	}
	picture = GFX_evt_binary_stars
	show_sound = event_space_cloud

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				NOT = {
					any_country = {
						is_country_type = tiyanki
						num_fleets > 0
					}
				}
				NOR = {
					any_system = { has_star_flag = elderly_tiyanki_system }
					exists = event_target:elderly_tiyanki_fleet
					exists = event_target:elderly_tiyanki_country
				}
			}
			set_global_flag = tiyanki_extinct
			if = {
				limit = {
					event_target:tiyanki_killer = { is_country_type = default }
					any_country = {
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
						has_country_flag = fallen_empire_3
					}
				}
				random_country = {
					limit = {
						OR = {
							is_country_type = fallen_empire
							is_country_type = awakened_fallen_empire
						}
						has_country_flag = fallen_empire_3
					}
					save_event_target_as = upset_elders
					event_target:tiyanki_killer = {
						country_event = { id = galactic_features.371 days = 20 }
					}
				}
			}
			if = {
				limit = {
					NOT = { is_active_resolution = "resolution_tiyanki_pest_control" }
				}
				every_country = {
					limit = {
						is_country_type = default
						has_communications = root
						has_ethic = "ethic_xenophile"
					}
					add_opinion_modifier = {
						who = root
						modifier = opinion_killed_all_tiyanki_1
					}
				}
				every_country = {
					limit = {
						is_country_type = default
						has_communications = root
						has_ethic = "ethic_fanatic_xenophile"
					}
					add_opinion_modifier = {
						who = root
						modifier = opinion_killed_all_tiyanki_2
					}
				}
			}
		}
	}

	option = {
		name = galactic_features.367.a
		trigger = {
			is_same_value = event_target:tiyanki_killer
		}
	}
	option = {
		name = galactic_features.367.b
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophile = yes
		}
	}
	option = {
		name = galactic_features.367.c
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophobe = yes
		}
	}
	option = {
		name = UNFORTUNATE
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophobe = no
			is_xenophile = no
		}
	}
}

# Surveyed Tiyanki Home System Gas Giant
ship_event = {
	id = galactic_features.368
	title = "galactic_features.368.name"
	desc = {
		trigger = {
			owner = {
				OR = {
					has_communications = event_target:tiyanki_garrison_country
					has_communications = event_target:tiyanki_country
				}
			}
		}
		text = "galactic_features.368.desc"
	}
	desc = {
		trigger = {
			owner = {
				NOR = {
					has_communications = event_target:tiyanki_garrison_country
					has_communications = event_target:tiyanki_country
				}
			}
		}
		text = "galactic_features.368.alt.desc"
	}
	picture = GFX_evt_binary_stars
	show_sound = event_scanner
	location = from

	is_triggered_only = yes

	trigger = {
		owner = {
			is_ai = no
			NOT = { has_country_flag = tiyanki_survey }
		}
		from = {
			OR = {
				has_planet_flag = tiyanki_giant1
				has_planet_flag = tiyanki_giant2
				has_planet_flag = tiyanki_giant3
				has_planet_flag = tiyanki_giant4
			}
		}
	}

	immediate = {
		owner = { set_country_flag = tiyanki_survey }
		from = {
			solar_system = { save_event_target_as = tiyanki_system }
		}
	}

	option = {
		name = FASCINATING
	}
}

# Tiyanki Extinct
country_event = {
	id = galactic_features.369
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = tiyanki_extinct }
		is_country_type = tiyanki
		num_ships = 0
		NOT = {
			any_country = {
				is_country_type = tiyanki_garrison
				num_ships > 0
			}
		}
	}

	immediate = {
		set_global_flag = tiyanki_extinct
		from = { save_event_target_as = tiyanki_killer }
		fromfrom = { save_event_target_as = tiyanki_system }
		every_playable_country = {
			limit = {
				is_ai = no
				has_communications = from
				intel_level = {
					level > none
					system = event_target:tiyanki_system
				}
			}
			country_event = { id = galactic_features.370 }
		}
	}
}

# Tiyanki Extinct - Informed
country_event = {
	id = galactic_features.370
	title = "galactic_features.370.name"
	desc = {
		trigger = {
			NOR = {
				any_system = { has_star_flag = elderly_tiyanki_system }
				exists = event_target:elderly_tiyanki_fleet
				exists = event_target:elderly_tiyanki_country
			}
		}
		text = "galactic_features.370.a.desc"
	}
	desc = {
		trigger = {
			any_system = { has_star_flag = elderly_tiyanki_system }
			exists = event_target:elderly_tiyanki_fleet
			exists = event_target:elderly_tiyanki_country
		}
		text = "galactic_features.370.b.desc"
	}
	picture = GFX_evt_binary_stars
	show_sound = event_space_cloud

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				event_target:tiyanki_killer = { is_country_type = default }
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_country_flag = fallen_empire_3
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_country_flag = fallen_empire_3
				}
				save_event_target_as = upset_elders
				event_target:tiyanki_killer = {
					country_event = { id = galactic_features.371 days = 20 }
				}
			}
		}
		if = {
			limit = {
				NOT = { is_active_resolution = "resolution_tiyanki_pest_control" }
			}
			every_country = {
				limit = {
					is_country_type = default
					has_communications = root
					has_ethic = "ethic_xenophile"
				}
				add_opinion_modifier = {
					who = root
					modifier = opinion_killed_all_tiyanki_1
				}
			}
			every_country = {
				limit = {
					is_country_type = default
					has_communications = root
					has_ethic = "ethic_fanatic_xenophile"
				}
				add_opinion_modifier = {
					who = root
					modifier = opinion_killed_all_tiyanki_2
				}
			}
		}
	}

	option = {
		name = galactic_features.367.a
		trigger = {
			is_same_value = event_target:tiyanki_killer
		}
	}
	option = {
		name = galactic_features.367.b
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophile = yes
		}
	}
	option = {
		name = galactic_features.367.c
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophobe = yes
		}
	}
	option = {
		name = UNFORTUNATE
		trigger = {
			NOT = { is_same_value = event_target:tiyanki_killer }
			is_xenophobe = no
			is_xenophile = no
		}
	}
}

# Tiyanki Extinct - Fallen Empire Reaction
country_event = {
	id = galactic_features.371
	title = TRANSMISSION
	desc = "galactic_features.371.desc"
	
	diplomatic = yes
	
	is_triggered_only = yes
	
	picture_event_data = {
		portrait = event_target:upset_elders
		planet_background = event_target:upset_elders
		graphical_culture = event_target:upset_elders
		city_level = event_target:upset_elders
		room = event_target:upset_elders
	}

	immediate = {
		if = {
			limit = {
				NOT = { has_communications = event_target:upset_elders }
			}
			establish_communications_no_message = event_target:upset_elders
		}
		event_target:upset_elders = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_killed_all_tiyanki_3
			}
		}
	}
	
	option = {
		name = galactic_features.371.a
		trigger = {
			is_xenophile = yes
		}
	}
	option = {
		name = galactic_features.371.b
		trigger = {
			is_xenophobe = yes
		}
	}
	option = {
		name = galactic_features.371.c
		trigger = {
			is_xenophobe = no
			is_xenophile = no
		}
	}
}

# Killed Tiyanki - COUNTER
country_event = {
	id = galactic_features.380
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = default
		from = {
			OR = {
				is_country_type = tiyanki
				is_country_type = tiyanki_garrison
			}
		}
	}

	immediate = {
		if = {
			limit = {
				fromfromfrom = { is_ship_size = space_whale_1 }
			}
			change_variable = { 
				which = tiyanki_cow_kills
				value = 1 
			}
		}
		else_if = {
			limit = {
				fromfromfrom = { is_ship_size = space_whale_2 }
			}
			change_variable = { 
				which = tiyanki_bull_kills
				value = 1 
			}
		}
		else_if = {
			limit = {
				fromfromfrom = { is_ship_size = space_whale_3 }
			}
			change_variable = { 
				which = tiyanki_hatchling_kills
				value = 1 
			}
		}
		else_if = {
			limit = {
				fromfromfrom = { is_ship_size = space_whale_4 }
			}
			change_variable = { 
				which = tiyanki_calf_kills
				value = 1 
			}
		}
	}
}

# Killed Tiyanki - Tally Kills
country_event = {
	id = galactic_features.381
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = default
		from = {
			OR = {
				is_country_type = tiyanki
				is_country_type = tiyanki_garrison
			}
		}
		NOT = {
			fromfrom = {
				any_combatant_fleet = {
					NOT = { is_same_value = fromfromfrom }
				}
			}
		}
	}

	immediate = {
		fromfrom = {
			solar_system = { save_event_target_as = tiyanki_kill_system }
		}
		if = {
			limit = {
				is_galactic_community_formed = yes
				is_galactic_community_member = yes
				is_active_resolution = "resolution_tiyanki_conservation_act"
			}
			country_event = { id = galcom.107 }
		}
		else = {
			country_event = { id = galactic_features.385 days = 1 }
		}
	}
}

# Killed Tiyanki
country_event = {
	id = galactic_features.385
	title = "galactic_features.385"
	desc = "galactic_features.385.desc"
	picture = GFX_evt_unknown_ships
	show_sound = event_energy_field
	location = event_target:tiyanki_kill_system

	is_triggered_only = yes

	abort_trigger = {
		any_owned_fleet = {
			is_in_combat = yes
			any_combatant_fleet = {
				owner = {
					OR = {
						is_country_type = tiyanki
						is_country_type = tiyanki_garrison
					}
				}
			}
		}
	}
	abort_effect = {
		remove_country_flag = no_cows
		remove_country_flag = no_bulls
		remove_country_flag = no_calves
		remove_country_flag = no_hatchlings
	}

	immediate = {
		if = {
			limit = {
				check_variable = {
					which = tiyanki_cow_kill_counter
					value < 1
				}
				check_variable = {
					which = tiyanki_cow_kills
					value < 1
				}
			}
			set_country_flag = no_cows
		}
		if = {
			limit = {
				check_variable = {
					which = tiyanki_bull_kill_counter
					value < 1
				}
				check_variable = {
					which = tiyanki_bull_kills
					value < 1
				}
			}
			set_country_flag = no_bulls
		}
		if = {
			limit = {
				check_variable = {
					which = tiyanki_calf_kill_counter
					value < 1
				}
				check_variable = {
					which = tiyanki_calf_kills
					value < 1
				}
			}
			set_country_flag = no_calves
		}
		if = {
			limit = {
				check_variable = {
					which = tiyanki_hatchling_kill_counter
					value < 1
				}
				check_variable = {
					which = tiyanki_hatchling_kills
					value < 1
				}
			}
			set_country_flag = no_hatchlings
		}

		while = {
			limit = {
				check_variable = {
					which = tiyanki_cow_kills
					value > 0
				}
			}
			change_variable = { 
				which = tiyanki_cow_kill_counter
				value = 1
			}
			change_variable = { 
				which = tiyanki_cow_credits
				value = 500
			}
			change_variable = { 
				which = tiyanki_cow_gas
				value = 50
			}
			change_variable = { 
				which = tiyanki_cow_kills
				value = -1 
			}
		}
		while = {
			limit = {
				check_variable = {
					which = tiyanki_bull_kills
					value > 0
				}
			}
			change_variable = { 
				which = tiyanki_bull_kill_counter
				value = 1
			}
			change_variable = { 
				which = tiyanki_bull_credits
				value = 500
			}
			change_variable = { 
				which = tiyanki_bull_gas
				value = 50
			}
			change_variable = { 
				which = tiyanki_bull_kills
				value = -1 
			}
		}
		while = {
			limit = {
				check_variable = {
					which = tiyanki_calf_kills
					value > 0
				}
			}
			change_variable = { 
				which = tiyanki_calf_kill_counter
				value = 1
			}
			change_variable = { 
				which = tiyanki_calf_credits
				value = 250
			}
			change_variable = { 
				which = tiyanki_calf_gas
				value = 25
			}
			change_variable = { 
				which = tiyanki_calf_kills
				value = -1 
			}
		}
		while = {
			limit = {
				check_variable = {
					which = tiyanki_hatchling_kills
					value > 0
				}
			}
			change_variable = { 
				which = tiyanki_hatchling_kill_counter
				value = 1
			}
			change_variable = { 
				which = tiyanki_hatchling_credits
				value = 150
			}
			change_variable = { 
				which = tiyanki_hatchling_gas
				value = 15
			}
			change_variable = { 
				which = tiyanki_hatchling_kills
				value = -1 
			}
		}

		if = {
			limit = {
				NOT = { is_active_resolution = "resolution_tiyanki_pest_control" }
			}
			every_country = {
				limit = {
					is_country_type = default
					has_communications = root
					has_ethic = "ethic_xenophile"
				}
				add_opinion_modifier = {
					who = root
					modifier = opinion_killed_tiyanki_fleet_1
				}
			}
			every_country = {
				limit = {
					is_country_type = default
					has_communications = root
					has_ethic = "ethic_fanatic_xenophile"
				}
				add_opinion_modifier = {
					who = root
					modifier = opinion_killed_tiyanki_fleet_2
				}
			}
		}
	}

	after = {
		hidden_effect = {
			while = {
				limit = {
					check_variable = {
						which = tiyanki_cow_kill_counter
						value > 0
					}
				}
				change_variable = { 
					which = tiyanki_cow_kill_counter
					value = -1
				}
				add_resource = { energy = 500 }
				add_resource = { exotic_gases = 50 }
			}
			while = {
				limit = {
					check_variable = {
						which = tiyanki_bull_kill_counter
						value > 0
					}
				}
				change_variable = { 
					which = tiyanki_bull_kill_counter
					value = -1 
				}
				add_resource = { energy = 500 }
				add_resource = { exotic_gases = 50 }
			}
			while = {
				limit = {
					check_variable = {
						which = tiyanki_calf_kill_counter
						value > 0
					}
				}
				change_variable = { 
					which = tiyanki_calf_kill_counter
					value = -1
				}
				add_resource = { energy = 250 }
				add_resource = { exotic_gases = 25 }
			}
			while = {
				limit = {
					check_variable = {
						which = tiyanki_hatchling_kill_counter
						value > 0
					}
				}
				change_variable = { 
					which = tiyanki_hatchling_kill_counter
					value = -1
				}
				add_resource = { energy = 150 }
				add_resource = { exotic_gases = 15 }
			}
			reset_tiyanki_variables = yes
			 # Return to neutral so other Tiyanki aren't hostile
			set_faction_hostility = {
				target = event_target:tiyanki_country
				set_hostile = no
				set_neutral = yes
				set_friendly = no
			}
		}
	}

	option = {
		name = galactic_features.385.a
		custom_tooltip = harvested_tiyanki
		if = {
			limit = {
				NOT = { has_country_flag = no_cows }
			}
			custom_tooltip = harvested_cows
		}
		if = {
			limit = {
				NOT = { has_country_flag = no_bulls }
			}
			custom_tooltip = harvested_bulls
		}
		if = {
			limit = {
				NOT = { has_country_flag = no_calves }
			}
			custom_tooltip = harvested_calves
		}
		if = {
			limit = {
				NOT = { has_country_flag = no_hatchlings }
			}
			custom_tooltip = harvested_hatchlings
		}
	}
}

### Space Storms
event = {
	id = galactic_features.400
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		mid_game_years_passed > 1
		NOR = {
			has_global_flag = ongoing_space_storm
			has_global_flag = space_storm_cooldown
		}
	}

	immediate = {
		random_list = {
			999 = {}
			10 = {
				event_target:global_event_country = {
					country_event = { id = galactic_features.401 }
				}
			}
		}
	}
}

# Create Storm
country_event = {
	id = galactic_features.401
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		set_global_flag = ongoing_space_storm
		every_system = {
			limit = {
				is_inside_nebula = no
				NOT = { has_star_flag = vluur_system }
			}
			random_list = {
				50 = {
					set_star_flag = storm_system
					star = {
						create_ambient_object = {
							type = "space_storm_1"
							location = this
						}
						last_created_ambient_object = {
							set_ambient_object_flag = space_storm_object
							set_location = {
								target = prev
								distance = 0
								angle = random
							}
						}
					}
					add_modifier = { modifier = space_storm }
				}
				50 = {}
			}
		}
		country_event = { id = galactic_features.403 days = 1800 random = 1800 }
		if = {
			limit = { 
				is_galactic_community_formed = yes
				any_playable_country = {
					is_galactic_community_member = yes
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
			}
			random_playable_country = {
				limit = { 
					is_galactic_community_member = yes
					NOT = { has_ethic = ethic_gestalt_consciousness }
				}
				create_leader = {
					class = admiral
					species = owner_main_species
					effect = {
						save_global_event_target_as = storm_name
						exile_leader_as = storm_name
					}
				}
			}
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = galactic_features.405 }
			}
		}
		else = {
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = galactic_features.402 }
			}
		}
	}
}

# Informed About Storm - No Galcom
country_event = {
	id = galactic_features.402
	title = "galactic_features.402.name"
	desc = "galactic_features.402.desc"
	picture = GFX_evt_partition
	show_sound = event_energy_field

	is_triggered_only = yes

	option = {
		name = galactic_features.402.a
	}
}

# Informed About Storm - GalCom Version
country_event = {
	id = galactic_features.405
	title = "galactic_features.405.name"
	desc = "galactic_features.405.desc"
	picture = GFX_evt_partition
	show_sound = event_energy_field

	is_triggered_only = yes

	option = {
		name = galactic_features.402.a
	}
}

# The Storm Ends
country_event = {
	id = galactic_features.403
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		remove_global_flag = ongoing_space_storm
		set_timed_global_flag = { flag = space_storm_cooldown days = 7200 }
		every_system = {
			limit = { has_star_flag = storm_system }
			random_system_ambient_object = {
				limit = { has_ambient_object_flag = space_storm_object }
				destroy_ambient_object = this
			}
			remove_star_flag = storm_system
			remove_modifier = space_storm
		}
		if = {
			limit = { is_galactic_community_formed = yes }
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = galactic_features.406 }
			}
		}
		else = {
			every_playable_country = {
				limit = { is_ai = no }
				country_event = { id = galactic_features.404 }
			}
		}
	}
}

# Informed About Storm Ending - No GalCom
country_event = {
	id = galactic_features.404
	title = "galactic_features.404.name"
	desc = "galactic_features.404.desc"
	picture = GFX_evt_partition
	show_sound = event_energy_field

	is_triggered_only = yes

	option = {
		name = GOOD
	}
}

# Informed About Storm Ending - GalCom Version
country_event = {
	id = galactic_features.406
	title = "galactic_features.406.name"
	desc = "galactic_features.406.desc"
	picture = GFX_evt_partition
	show_sound = event_energy_field

	is_triggered_only = yes

	option = {
		name = GOOD
	}
}

# Space Cloud - VLUUR
event = {
	id = galactic_features.420
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_system = { has_star_flag = tiyanki_home_system }
	}

	immediate = {
		random_system = {
			limit = { has_star_flag = tiyanki_home_system } # Shares spawn system with Tiyanki
			set_star_flag = vluur_system
			star = {
				create_ambient_object = {
					type = "space_storm_1"
					location = this
				}
				last_created_ambient_object = {
					set_ambient_object_flag = space_storm_object
					set_location = {
						target = prev
						distance = 0
						angle = random
					}
				}
			}
			add_modifier = { modifier = vluur_storm }
			random_system_planet = {
				create_country = {
					name = "NAME_VLUUR"
					type = vluur
					flag = {
						icon = {
							category = "zoological"
							file = "flag_zoological_1.dds"
						}
						background= {
							category = "backgrounds"
							file = "00_solid.dds"
						}
						colors={
							"black"
							"black"
							"null"
							"null"
						}
					}
					effect = {
						save_event_target_as = vluur_country
						add_modifier = {
							modifier = vluur_power
							days = -1
						}
					}
				}
				create_fleet = {
					name = "NAME_VLUUR"
					effect = {
						set_owner = event_target:vluur_country
						create_ship = {
							name = "NAME_VLUUR"
							design = "NAME_Cloud_Entity"
						}
						set_location = prev
						set_fleet_stance = passive
						set_aggro_range_measure_from = return_point
						set_aggro_range = 0
						queue_actions = {
							wait = { # Cooldown until they start moving
								duration = 10
								duration = 2000
								random = 500
							}
						}
					}
				}
			}
		}
	}
}

# VLUUR - First Encounter
country_event = {
	id = galactic_features.421
	title = "galactic_features.421.name"
	desc = "galactic_features.421.desc"
	picture = GFX_evt_binary_stars
	show_sound = event_energy_field
	location = fromfromfrom

	is_triggered_only = yes

	trigger = {
		from = { is_country_type = vluur }
	}

	immediate = {
		establish_communications_no_message = from
	}

	option = {
		name = galactic_features.421.a
	}
}

# VLUUR - Destroyed - HIDDEN
country_event = {
	id = galactic_features.422
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		is_country_type = vluur
	}

	immediate = {
		fromfrom = {
			solar_system = { 
				save_event_target_as = vluur_system
				remove_star_flag = vluur_system
				if = {
					limit = {
						NOT = { has_star_flag = storm_system }
					}
					random_system_ambient_object = {
						limit = { has_ambient_object_flag = space_storm_object }
						destroy_ambient_object = this
					}
					remove_modifier = vluur_storm
				}
				while = {
					limit = {
						any_system_planet = {
							is_star = no
							NOR = {
								has_deposit_for = shipclass_research_station
								has_deposit_for = shipclass_mining_station
							}
						}
					}
					count = 4
					random_system_planet = {
						limit = {
							is_star = no
							NOR = {
								has_deposit_for = shipclass_research_station
								has_deposit_for = shipclass_mining_station
							}
						}
						random_list = {
							10 = { add_deposit = d_dark_matter_deposit_1 }
							10 = { add_deposit = d_dark_matter_deposit_2 }
							10 = { add_deposit = d_dark_matter_deposit_3 }
						}
					}
				}
			}
		}
		if = {
			limit = {
				from = {
					OR = {
						is_country_type = default
						is_fallen_empire = yes
					}
				}
			}
			from = { 
				country_event = { id = galactic_features.423 }
			}
		}
	}
}

# VLUUR - Destroyed
country_event = {
	id = galactic_features.423
	title = "galactic_features.423.name"
	desc = "galactic_features.423.desc"
	picture = GFX_evt_large_explosion
	show_sound = event_super_explosion
	location = event_target:vluur_system

	is_triggered_only = yes

	option = {
		name = galactic_features.423.a
		add_resource = { sr_dark_matter = 100 }
		custom_tooltip = galactic_features.423.tooltip
	}
}

# VLUUR Enters System
fleet_event = {
	id = galactic_features.425
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		owner = {
			is_country_type = vluur
		}
	}

	immediate = {
		every_system = {
			limit = { has_star_flag = vluur_system }
			remove_star_flag = vluur_system
			if = {
				limit = {
					NOT = { has_star_flag = storm_system }
				}
				random_system_ambient_object = {
					limit = { has_ambient_object_flag = space_storm_object }
					destroy_ambient_object = this
				}
				remove_modifier = vluur_storm
			}
		}
		solar_system = {
			set_star_flag = vluur_system
			if = {
				limit = {
					NOT = { has_star_flag = storm_system }
				}
				star = {
					create_ambient_object = {
						type = "space_storm_1"
						location = this
					}
					last_created_ambient_object = {
						set_ambient_object_flag = space_storm_object
						set_location = {
							target = prev
							distance = 0
							angle = random
						}
					}
				}
				add_modifier = { modifier = vluur_storm }
			}
		}
	}
}




# Entering Amoeba Home System for the first time
# Scope = Ship
# From = System
# FromFrom = Country
ship_event = {
	id = galactic_features.500
	title = galactic_features.500.name
	desc = {
		trigger = {
			owner = {
				OR = {
					has_communications = event_target:amoeba_garrison_country
					has_communications = event_target:amoeba_country
				}
			}
		}
		text = galactic_features.500.desc
	}
	desc = {
		trigger = {
			owner = {
				has_modifier = pacified_amoebas
			}
		}
		text = galactic_features.500.desc.peaceful
	}
	desc = {
		trigger = {
			owner = {
				NOR = {
					has_communications = event_target:amoeba_garrison_country
					has_communications = event_target:amoeba_country
				}
			}
		}
		text = galactic_features.500.alt.desc
	}
	picture = GFX_evt_friendly_amoeba
	show_sound = event_scanner
	location = from

	is_triggered_only = yes

	trigger = {
		owner = {
			is_ai = no
		}
		from = {
			has_star_flag = amoeba_home_system
			any_fleet_in_system = {
				owner = {
					is_country_type = amoeba_garrison
				}
			}
		}
	}

	option = {
		name = {
			text = BATTLESTATIONS
			trigger = {
				owner = {
					NOT = { has_modifier = pacified_amoebas }
				}
			}
		}
		name = {
			text = INTERESTING
			trigger = {
				owner = {
					has_modifier = pacified_amoebas
				}
			}
		}
	}
}


# Amoeba fleet emerges from their home system
# Scope = Fleet
# From = System
fleet_event = {
	id = galactic_features.501
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_fleet_flag = amoeba_home_wave
		from = {
			exists = space_owner
		}
	}

	immediate = {
		remove_fleet_flag = amoeba_home_wave
		from.space_owner = {
			country_event = { id = galactic_features.502 }
		}
	}
}

#Notification of previous event
country_event = {
	id = galactic_features.502
	title = galactic_features.502.name
	desc = {
		trigger = {
			OR = {
				has_communications = event_target:amoeba_garrison_country
				has_communications = event_target:amoeba_country
			}
		}
		text = galactic_features.502.desc
	}
	desc = {
		trigger = {
			has_modifier = pacified_amoebas
		}
		text = galactic_features.502.desc.peaceful
	}
	desc = {
		trigger = {
			NOR = {
				has_communications = event_target:amoeba_garrison_country
				has_communications = event_target:amoeba_country
			}
		}
		text = galactic_features.502.alt.desc
	}
	location = fromfrom
	picture = GFX_evt_friendly_amoeba
	show_sound = event_scanner
	is_triggered_only = yes

	trigger = {
		intel_level = {
			level > none
			system = event_target:amoeba_home_system
		}
	}

	option = {
		name = {
			text = BATTLESTATIONS
			trigger = {
				NOT = { has_modifier = pacified_amoebas }
			}
		}
		name = {
			text = INTERESTING
			trigger = {
				has_modifier = pacified_amoebas
			}
		}
	}
}


# Comply with Galactic Law on Amoebas
country_event = {
	id = galactic_features.505
	title = galactic_features.505.name
	desc = galactic_features.505.desc
	location = fromfrom
	picture = GFX_evt_friendly_amoeba
	show_sound = event_vote
	is_triggered_only = yes

	option = { #of course
		name = galactic_features.505.A
		custom_tooltip = story.107.a.tooltip
		hidden_effect = {
			add_modifier = {
				modifier = pacified_amoebas # friendly amoebas
				days = -1
			}
			every_country = {
				limit = {
					OR = {
						is_country_type = amoeba
						is_country_type = amoeba_borderless
						is_country_type = amoeba_garrison
					}
				}
				set_faction_hostility = {
					set_hostile = no
					set_neutral = yes
					target = root
				}
			}
		}
		ai_chance = {
			factor = 2
			modifier = {
				factor = 5
				OR = {
					is_xenophile = yes
					is_pacifist = yes
				}
			}
		}
	}
	option = { #we will not protect vermin
		name = galactic_features.505.B
		custom_tooltip = galactic_features.505.B.tt
		ai_chance = {
			factor = 1
			modifier = {
				factor = 5
				OR = {
					is_militarist = yes
					is_xenophobe = yes
				}
			}
		}
	}
}


# Set to hostile if attacked.

# This = Attacked Fleet
# From = Aggressor Fleet
# FromFrom = Additional Attacked Fleet (if joining ongoing combat)
# FromFromFrom = Additional Attacked Fleet (if joining ongoing combat)
fleet_event = {
	id = galactic_features.550
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		owner = {
			OR = {
				is_forced_friendly = from.owner
				is_forced_neutral = from.owner
			}
		}
	}

	immediate = {
		#needs a few day's delay because if you create a country, set it to neutral, and create a fleet for it, the battle will start before the country realises it should be neutral.
		fleet_event = { id = galactic_features.551 days = 2 }
	}
}

fleet_event = {
	id = galactic_features.551
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = fromfrom.owner
		is_in_combat = yes
		owner = {
			OR = {
				is_forced_friendly = fromfrom.owner
				is_forced_neutral = fromfrom.owner
			}
		}
	}

	immediate = {
		owner = {
			if = {
				limit = {
					is_forced_friendly = fromfrom.owner
				}
				set_faction_hostility = {
					target = fromfrom.owner
					set_friendly = no
				}
			}
			if = {
				limit = {
					is_forced_neutral = fromfrom.owner
				}
				set_faction_hostility = {
					target = fromfrom.owner
					set_neutral = no
				}
			}
		}
	}
}