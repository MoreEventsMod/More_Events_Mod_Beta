##############################
# Coded by Asnys and Malthus #
##############################

namespace = mem_ancient_robots

# Start of event sequence
# happens on colonizing planet
planet_event = {
	id = mem_ancient_robots.1
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robots_fired
		}
		owner = {
			is_country_type = default
			is_ai = no
			NOT = {
				has_ethic = ethic_gestalt_consciousness
			}
		}
		planet_size > 19
		any_tile = {
			has_blocker = tb_mountain_range
		}
	}
	immediate = {
		random_list = {
			7 = { set_planet_flag = mem_ancient_robot_spawn_set }
			93 = {}
		}
	}
}

planet_event = {
	id = mem_ancient_robots.201
	title = mem_ancient_robots.201.name
	desc = mem_ancient_robots.201.desc
	picture = GFX_evt_archaeological_dig
	show_sound = event_default
	location = ROOT
	
	mean_time_to_happen = { months = 36 }
	
	trigger = { # Change trigger mechanism to accord with other colony events
		NOT = {
			has_global_flag = mem_ancient_robots_fired
		}
		has_planet_flag = mem_ancient_robot_spawn_set
		has_owner = yes
		owner = {
			is_ai = no
			is_country_type = default
			NOT = {
				has_ethic = ethic_gestalt_consciousness
			}
		}
		original_owner = yes
		num_pops > 1
		NOT = {
			has_planet_flag = colony_event
		}
		any_tile = {
			has_blocker = tb_mountain_range
		}
	}
	
	immediate = {
		owner = {
			set_country_flag = mem_ancient_robot_quest_owner
		}
		set_planet_flag = colony_event # This flag is used to tell the game not to trigger other colony events here
		set_planet_flag = mem_ancient_robot_world # Used to keep track of which world this is happening on
		set_global_flag = mem_ancient_robots_fired
		random_tile = { # Replace a mountain range with a new mountain range that is not clearable
			limit = {
				has_blocker = tb_mountain_range
			}
			set_blocker = mem_tb_unclearable_mountain
		}
	}
	
	option = {
		name = mem_ancient_robots.201.a
		begin_event_chain = {
			event_chain = "mem_ancient_robots_chain"
			target = root.owner
		}
		enable_special_project = { # Create special project to study the mountain
			name = MEM_ANCIENT_ROBOTS_PROJECT
			location = root
			owner = root
		}
	}
}

# Finish special project studying the mountain

planet_event = {
	id = mem_ancient_robots.203
	title = mem_ancient_robots.203.name
	desc = mem_ancient_robots.203.desc
	picture = GFX_evt_mem_strange_mountain
	show_sound = event_scanner
	location = ROOT
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		random_tile = {
			limit = {
				has_blocker = mem_tb_unclearable_mountain
			}
			set_blocker = mem_tb_strange_mountain
		}
	}
	
	is_triggered_only = yes
	
	option = { # Do it - eats 200 energy + minerals, adds project
		trigger = {
			owner = {
				energy > 199
				minerals > 199
			}
		}
		name = mem_ancient_robots.203.a
		owner = {
			add_energy = -200
			add_minerals = -200
		}
		enable_special_project = {
			name = MEM_ANCIENT_ROBOTS_PROJECT_2
			location = this
			owner = root
		}
	}
	
	option = { # Ask again later
		name = mem_ancient_robots.203.b
		hidden_effect = {
			planet_event = { id = mem_ancient_robots.204 days = 180 }
		}
	}
	
	option = { # No, and don't ask again
		name = mem_ancient_robots.203.c
		hidden_effect = {
			planet_event = { id = mem_ancient_robots.207 days = 2160 random = 360 }
		}
	}
}

# Ask again about excavation:

planet_event = {
	id = mem_ancient_robots.204
	title = mem_ancient_robots.204.name
	desc = mem_ancient_robots.204.desc
	picture = GFX_evt_mem_strange_mountain
	show_sound = event_default
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	option = { # Yes, do it
		trigger = {
			owner = {
				energy > 199
				minerals > 199
			}
		}
		name = mem_ancient_robots.204.a
		owner = {
			add_energy = -200
			add_minerals = -200
			enable_special_project = {
				name = MEM_ANCIENT_ROBOTS_PROJECT_2
				location = prev
				owner = root
			}
		}
	}
	
	option = { # Ask me again later
		name = mem_ancient_robots.204.b
		hidden_effect = {
			ROOT = {
				planet_event = { id = mem_ancient_robots.204 days = 180 }
			}
		}
	}
	
	option = { # No, don't ask again
		name = mem_ancient_robots.204.c
		hidden_effect = {
			ROOT = {
				planet_event = { id = mem_ancient_robots.207 days = 1800 random = 360 }
			}
		}
	}
}

# Excavation Completed:

planet_event = {
	id = mem_ancient_robots.206
	title = mem_ancient_robots.206.name
	desc = mem_ancient_robots.206.desc
	picture = GFX_evt_mem_ancient_factory
	show_sound = event_mystic_reveal_light
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		random_tile = {
			limit = { has_blocker = mem_tb_strange_mountain }
			set_blocker = mem_tb_robot_factory
		}
	}
	
	option = {
		name = mem_ancient_robots.206.a
		owner = {
			enable_special_project = { # Enable special project to study robot parts
				name = MEM_ANCIENT_ROBOTS_PROJECT_3
				location = prev
				owner = root.owner
			}
			add_monthly_resource_mult = { # Give engineering points
				resource = engineering_research
				value = 18
				min = 120
				max = 350
			}
		}	
		hidden_effect = { # Set up next event
			random_list = {
				60 = { planet_event = { id = mem_ancient_robots.208 days = 30 } }
				40 = { planet_event = { id = mem_ancient_robots.209 days = 30 } }
			}
		}
	}
}

# Excavation performed by someone else:

planet_event = {
	id = mem_ancient_robots.207
	title = mem_ancient_robots.207.name
	desc = mem_ancient_robots.207.desc
	picture = GFX_evt_mem_ancient_factory
	show_sound = event_mystic_reveal_light
	location = ROOT
	
	is_triggered_only = yes 
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		random_tile = {
			limit = { has_blocker = mem_tb_strange_mountain }
			set_blocker = mem_tb_robot_factory
		}
	}
	
	option = {
		name = mem_ancient_robots.207.a
		owner = { # Enable special project to study robot parts
			enable_special_project = {
				name = MEM_ANCIENT_ROBOTS_PROJECT_3
				location = prev
				owner = root.owner
			}
		}	
		hidden_effect = {
			random_list = { # Set up next event
				60 = { planet_event = { id = mem_ancient_robots.208 days = 30 } }
				40 = { planet_event = { id = mem_ancient_robots.209 days = 30 } }
			}
		}
	}
}

# AI is (initially) friendly:

planet_event = {
	id = mem_ancient_robots.208
	title = mem_ancient_robots.208.name
	desc = mem_ancient_robots.208.desc
	show_sound = event_alien_signal
	picture = GFX_evt_sentient_AI
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		random_tile = { # Change the strange mountain into an AI factory
			limit = {
				has_blocker = mem_tb_robot_factory
			}
			remove_blocker = yes
			set_building = mem_ancient_robot_building_1
		}
		owner = {
			set_variable = {
				which = "mem_super_robot_army_count" 
				value = 0
			}
		}
		set_planet_flag = mem_ancient_robots_AI_friendly
	}
	
	option = {
		name = mem_ancient_robots.208.a
		hidden_effect = { # Set up later event where it goes rogue
			planet_event = { id = mem_ancient_robots.223 days = 1080 random = 600 }
		}
	}
}

# Evil robots swarm out after you power up the complex:

planet_event = {
	id = mem_ancient_robots.209
	title = mem_ancient_robots.209.name
	desc = mem_ancient_robots.209.desc
	picture = GFX_evt_ground_combat
	show_sound = event_ai_started
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = { # This creates the EVIL ROBOT ARMIES:
		planet_event = { id = mem_ancient_robots.221 days = 1 }
	}
	
	option = {
		name = mem_ancient_robots.209.a
	}
}

# AI goes rogue after a period of friendliness:

planet_event = {
	id = mem_ancient_robots.210
	title = mem_ancient_robots.210.name
	desc = mem_ancient_robots.210.desc
	picture = GFX_evt_ground_combat
	show_sound = event_ai_started
	location = ROOT
	
	is_triggered_only = yes
	fire_only_once = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
		owner = {
			has_country_flag = mem_ancient_robot_quest_owner
		}
	}
	
	immediate = { # This creates the EVIL ROBOT ARMIES:
		random_tile = {
			limit = { has_building = mem_ancient_robot_building_1 }
			remove_building = yes
			set_blocker = mem_tb_robot_factory
		}
		planet_event = { id = mem_ancient_robots.221 days = 1 }
		remove_planet_flag = mem_ancient_robots_AI_friendly
	}
	
	option = {
		name = mem_ancient_robots.210.a
	}
}

#Victory over initial robot armies:
#This = country, planet owner
#From = country, attack leader
#FromFrom = planet

country_event = {
	id = mem_ancient_robots.211
	title = mem_ancient_robots.211.name
	desc = mem_ancient_robots.211.desc
	picture = GFX_evt_ground_combat
	show_sound = event_ground_battle
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		FROMFROM = {
			has_planet_flag = mem_super_robot_attack
			is_occupied_flag = no
			controller = {
				is_same_value = ROOT
			}
		}
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		FROMFROM = {
			remove_planet_flag = mem_super_robot_attack
		}
	}
	
	option = {
		name = mem_ancient_robots.211.a
		#Set up special project to lay siege to the AI
		enable_special_project = {
			name = MEM_SIEGE_PROJECT
			location = FROMFROM
			owner = root
		}
	}
}

# Retaking the planet
planet_event = {
	id = mem_ancient_robots.2111
	title = mem_ancient_robots.211.name
	desc = mem_ancient_robots.211.desc
	picture = GFX_evt_ground_combat
	show_sound = event_ground_battle
	location = root

	trigger = {
		has_owner = yes
		owner = {
			is_ai = no
		}
		has_planet_flag = mem_super_robot_attack
		is_occupied_flag = no
		has_ground_combat = no
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		remove_planet_flag = mem_super_robot_attack
	}
	
	option = {
		name = mem_ancient_robots.211.a
		# Set up special project to lay siege to the AI
		enable_special_project = {
			name = MEM_SIEGE_PROJECT
			location = root
			owner = root.owner
		}
	}
}

# Defeated by First Robot Swarm, First Purge:

country_event = {
	id = mem_ancient_robots.212
	title = mem_ancient_robots.212.name
	desc = mem_ancient_robots.212.desc
	picture = GFX_evt_burning_settlement
	show_sound = event_ai_started
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		has_country_flag = mem_ancient_robot_quest_owner
		FROMFROM = {
			has_planet_flag = mem_super_robot_attack
		}
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		FROMFROM = {
			# IF = {
				# limit = { has_spaceport = yes }
				# destroy_fleet = spaceport
			# }
			IF = {
				limit = {
					any_pop = {
						is_growing = yes
					}
				}
				random_pop = {
					limit = { 
						is_growing = yes
					}
					kill_pop = yes
				}
			}
			IF = {
				limit = { 
					count_pops = {
						limit = {
							is_growing = no
						}
						count > 1
					} 
				}
				planet_event = { id = mem_ancient_robots.226 days = 50 }
				else = {
					planet_event = { id = mem_ancient_robots.225 days = 30 }
				}
			}
		}
	}
	
	option = {
		name = mem_ancient_robots.212.a
	}
}

# Robots swarm out, round two:

planet_event = {
	id = mem_ancient_robots.213
	title = mem_ancient_robots.213.name
	desc = mem_ancient_robots.213.desc
	picture = GFX_evt_ground_combat
	show_sound = event_ground_battle
	location = ROOT
	
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		set_planet_flag = mem_super_robot_attack_2
		create_country = {
			name = "Ancient Robots"
			type = faction
			effect = {
				establish_communications_no_message = root.owner
			}
			species = robot
			flag = {
				icon = {
					category = "pirate"
					file = "flag_pirate_10.dds"
				}
				background= {
					category = "backgrounds"
					file = "stripes.dds"
				}
				colors={
					"red"
					"black"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			save_event_target_as = mem_evil_robots
			set_country_flag = mem_these_are_evil_robots
		}
		
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
	}
	
	option = {
		name = mem_ancient_robots.213.a
	}
}

# Defeat Second Set of Robot Armies:
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet

country_event = {
	id = mem_ancient_robots.214
	title = mem_ancient_robots.214.name
	desc = mem_ancient_robots.214.desc
	picture = GFX_evt_interior_battle
	show_sound = event_ground_battle
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		has_country_flag = mem_ancient_robot_quest_owner
		FROMFROM = {
			has_planet_flag = mem_super_robot_attack_2
		}
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		FROMFROM = {
			set_planet_flag = mem_ancient_robot_building
			set_global_flag = mem_ancient_robot_finish
			remove_planet_flag = mem_super_robot_attack_2
			remove_modifier = mem_under_siege
			random_tile = {
				limit = {
					has_blocker = mem_tb_robot_factory
				}
				remove_blocker = yes
				set_building = mem_ancient_robot_building_2
			}
		}
	}
	
	option = {
		name = mem_ancient_robots.214.a
		end_event_chain = "mem_ancient_robots_chain"
		add_monthly_resource_mult = {
			resource = engineering_research
			value = 18
			min = 120
			max = 350
		}
	}
}

# Defeated by Second Set of Robot Armies:

country_event = {
	id = mem_ancient_robots.215
	title = mem_ancient_robots.215.name
	desc = mem_ancient_robots.215.desc
	picture = GFX_evt_nuclear_explosion
	show_sound = event_super_explosion
	location = FROMFROM
	
	is_triggered_only = yes
	
	trigger = {
		is_ai = no
		has_country_flag = mem_ancient_robot_quest_owner
		FROMFROM = {
			has_planet_flag = mem_super_robot_attack_2
		}
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		FROM = {
			destroy_country = yes
		}
		FROMFROM = {
			remove_planet_flag = mem_super_robot_attack_2
			remove_modifier = mem_under_siege
			destroy_colony = { keep_buildings = no }
			change_pc = pc_nuked
		}
	}
	
	option = {
		name = mem_ancient_robots.215.a
		end_event_chain = "mem_ancient_robots_chain"
	}
}

# Complete robot unit analysis:

planet_event = {
	id = mem_ancient_robots.220
	title = mem_ancient_robots.220.name
	desc = mem_ancient_robots.220.desc
	picture = GFX_evt_mem_ancient_robots_project
	show_sound = event_laboratory_sound
	location = ROOT
	
	is_triggered_only = yes
	
	option = {
		name = mem_ancient_robots.220.a
		owner = {
			if = {
				limit = {
					has_technology = tech_droid_workers
				}
				add_monthly_resource_mult = {
					resource = engineering_research
					value = 18
					min = 120
					max = 350
				}
				else = {
					add_research_option = tech_droid_workers
					add_tech_progress = {
						tech = tech_droid_workers
						progress = 0.10
					}
				}
			}
		}
	}
}

# Generate EVIL ROBOT armies:

planet_event = {
	id = mem_ancient_robots.221
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		set_planet_flag = mem_super_robot_attack
		set_planet_health = 0
		owner = {
			save_event_target_as = mem_ancient_robots_planet_owner
		}
		create_country = {
			name = "Ancient Robots"
			type = faction
			effect = {
				establish_communications_no_message = root.owner
			}
			species = robot
			flag = {
				icon = {
					category = "pirate"
					file = "flag_pirate_10.dds"
				}
				background= {
					category = "backgrounds"
					file = "stripes.dds"
				}
				colors={
					"red"
					"black"
					"null"
					"null"
				}
			}
		}
		last_created_country = {
			save_global_event_target_as = mem_evil_robots
			set_country_flag = mem_these_are_evil_robots
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}
		create_army = {
			name = "Robot Swarm"
			owner = event_target:mem_evil_robots
			species = robot
			type = mem_evil_robot_army
		}		
		add_modifier = {
			modifier = mem_under_siege
			days = -1
		}
	}
}

# AI Factory Dismantled During Initially Friendly Period:

planet_event = {
	id = mem_ancient_robots.222
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		has_owner = yes
		owner = {
			has_country_flag = mem_ancient_robot_quest_owner
		}
		has_planet_flag = mem_ancient_robots_AI_friendly
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
			any_tile = {
				has_building = mem_ancient_robot_building_1
			}
		}
	}
	
	immediate = {
		FROM = {
			remove_building = yes
			set_building = mem_ancient_robot_building_2
		}
		planet_event = { id = mem_ancient_robots.210 days = 1 }
	}	
}

# Switch for whether factory should go evil:

planet_event = {
	id = mem_ancient_robots.223
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	
	immediate = {
		if = {
			limit = {
				count_pops = {
					limit = {
						is_growing = no
					}
					count > 1
				}
			}
			#TODO random list
			random_list = {
				50 = { planet_event = { id = mem_ancient_robots.210 days = 1 } }
				50 = {}
			}
			else = {
				planet_event = { id = mem_ancient_robots.223 days = 180 random = 30 }
			}
		}
	}
}

# 224 has been deleted for being redundant purge mechanic

# The last pop has fortified their position.
planet_event = {
    id = mem_ancient_robots.225
    title = "mem_ancient_robots.225.name"
    desc = "mem_ancient_robots.225.desc"
	picture = GFX_evt_burning_settlement
	show_sound = event_ai_started
	location = ROOT
    
	is_triggered_only = yes
	fire_only_once = yes
	
	trigger = {
		owner = {
			has_country_flag = mem_ancient_robot_quest_owner
		}
		has_planet_flag = mem_super_robot_attack
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
	}
	option = {
		name = mem_ancient_robots.225.a	
	}
}

# Cyclic purge initiation when under occupation
planet_event = {
    id = mem_ancient_robots.226
    hide_window = yes
    is_triggered_only = yes
    trigger = {
		owner = {
			has_country_flag = mem_ancient_robot_quest_owner
		}
        has_planet_flag = mem_super_robot_attack
        controller = {
            is_same_value = event_target:mem_evil_robots
        }
		NOT = {
			has_global_flag = mem_ancient_robot_cancel
		}
    }
    immediate = {
        IF = {
			limit = { 
				count_pops = {
					limit = {
						is_growing = no
					}
					count > 1
				} 
			}
			random_pop = {
				limit = { is_growing = no }
				kill_pop = yes
			}
            planet_event = {
                id = mem_ancient_robots.226 #Refire this event after a few months month
                days = 120
				random = 30
            }
			else = {
				planet_event = { id = mem_ancient_robots.225 } # The last pop has fortified their position.
			}
		}
    }
}

# 227 removed because of being redundant spawning mechanic

# cleanup event in case planet is ceded to another empire
event = {
    id = mem_ancient_robots.228
    hide_window = yes
    is_triggered_only = yes
    trigger = {
        has_global_flag = mem_ancient_robots_fired
		NOT = {
			has_global_flag = mem_ancient_robot_finish
			has_global_flag = mem_ancient_robot_cancel
		}
		any_system = {
			any_planet = {
				AND = {
					has_planet_flag = mem_ancient_robot_world
					owner = {
						NOT = {
							has_country_flag = mem_ancient_robot_quest_owner
						}
					}
				}
			}
		}
    }
    immediate = {
		set_global_flag = mem_ancient_robot_cancel
		random_planet = {
			limit = {
				has_planet_flag = mem_ancient_robot_world
			}
			random_tile = {
				limit = {
					OR = {
						has_blocker = mem_tb_unclearable_mountain
						has_blocker = mem_tb_strange_mountain
						has_blocker = mem_tb_robot_factory
					}
				}
				remove_blocker = yes
			}
			remove_modifier = mem_under_siege
		}
		random_country = {
			limit = {
				has_country_flag = mem_ancient_robot_quest_owner
				has_event_chain = mem_ancient_robots_chain
			}
			end_event_chain = "mem_ancient_robots_chain"
		}
	}
}

# Test event to set a mountain range tile blocker
planet_event = {
	id = mem_ancient_robots.230
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		random_tile = {
			set_blocker = tb_mountain_range
		}
	}
}