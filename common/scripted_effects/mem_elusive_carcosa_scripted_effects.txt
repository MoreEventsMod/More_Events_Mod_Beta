# Given a species, create a mod with the new trait and apply to all pops, leaders
# and armies that have the original species and the same owner as the scope object.
# Scope: Something that has a species and an owner
mem_create_redefined_productivity_species_mod = {
	species = {
		save_event_target_as = changing_species

		switch = {
			trigger = has_trait

			trait_pc_desert_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_desert
				}
			}
			trait_pc_arid_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_arid
				}
			}
			trait_pc_savannah_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_savannah
				}
			}
			trait_pc_tropical_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_tropical
				}
			}
			trait_pc_continental_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_continental
				}
			}
			trait_pc_ocean_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_ocean
				}
			}
			trait_pc_arctic_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_arctic
				}
			}
			trait_pc_tundra_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_tundra
				}
			}
			trait_pc_alpine_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_alpine
				}
			}
			trait_pc_ai_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_ai
				}
			}
			trait_pc_nuked_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_nuked
				}
			}
			trait_pc_gaia_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_gaia
				}
			}
			trait_pc_ringworld_habitable_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_ringworld_habitable
				}
			}
			trait_pc_habitat_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_habitat
				}
			}
			trait_pc_machine_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_machine
				}
			}
			trait_pc_hive_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_hive
				}
			}
			trait_pc_relic_preference = {
				mem_create_redefined_productivity_species_mod_with_pc_effect = {
					planet_class = pc_relic
				}
			}
			default = {
				create_species = {
					is_mod = yes
					name = this
					plural = this
					class = this
					portrait = this
					traits = this
					traits = {
						trait = trait_mem_redefined_productivity
					}
					homeworld = this
				}
			}
		}
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

mem_create_redefined_productivity_species_mod_with_pc_effect = {
	create_species = {
		is_mod = yes
		name = this
		plural = this
		class = this
		portrait = this
		traits = this
		traits = {
			trait = trait_mem_redefined_productivity
		}
		homeworld = this
	}
	prev = {
		modify_species = {
			species = last_created_species
			ideal_planet_class = $planet_class$
		}
	}
}

# Given a species, create a mod with the new trait and apply to all pops, leaders
# and armies that have the original species and the same owner as the scope object.
# Scope: Something that has a species and an owner
mem_create_redefined_happiness_species_mod = {
	species = {
		save_event_target_as = changing_species

		switch = {
			trigger = has_trait

			trait_pc_desert_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_desert
				}
			}
			trait_pc_arid_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_arid
				}
			}
			trait_pc_savannah_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_savannah
				}
			}
			trait_pc_tropical_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_tropical
				}
			}
			trait_pc_continental_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_continental
				}
			}
			trait_pc_ocean_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_ocean
				}
			}
			trait_pc_arctic_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_arctic
				}
			}
			trait_pc_tundra_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_tundra
				}
			}
			trait_pc_alpine_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_alpine
				}
			}
			trait_pc_ai_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_ai
				}
			}
			trait_pc_nuked_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_nuked
				}
			}
			trait_pc_gaia_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_gaia
				}
			}
			trait_pc_ringworld_habitable_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_ringworld_habitable
				}
			}
			trait_pc_habitat_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_habitat
				}
			}
			trait_pc_machine_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_machine
				}
			}
			trait_pc_hive_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_hive
				}
			}
			trait_pc_relic_preference = {
				mem_create_redefined_happiness_species_mod_with_pc_effect = {
					planet_class = pc_relic
				}
			}
			default = {
				create_species = {
					is_mod = yes
					name = this
					plural = this
					class = this
					portrait = this
					traits = this
					traits = {
						trait = trait_mem_redefined_happiness
					}
					homeworld = this
				}
			}
		}
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

mem_create_redefined_happiness_species_mod_with_pc_effect = {
	create_species = {
		is_mod = yes
		name = this
		plural = this
		class = this
		portrait = this
		traits = this
		traits = {
			trait = trait_mem_redefined_happiness
		}
		homeworld = this
	}
	prev = {
		modify_species = {
			species = last_created_species
			ideal_planet_class = $planet_class$
		}
	}
}