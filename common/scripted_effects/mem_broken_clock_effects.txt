#Gives intruding empire some tech
# mem_broken_clock_give_tech = {
#     #Basic means of pruduction
#     give_technology = {
#         tech = tech_powered_exoskeletons
#         message = no
#     }
#     give_technology = {
#         tech = tech_mining_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_mining_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_mining_3
#         message = no
#     }
#     IF = {
#         limit = {
#             NOT = {
#                 has_authority = auth_machine_intelligence
#             }
#         }
#         give_technology = {
#             tech = tech_hydroponics
#             message = no
#         }
#         give_technology = {
#             tech = tech_gene_crops
#             message = no
#         }
#         give_technology = {
#             tech = tech_nano_vitality_crops
#             message = no
#         }
#     }
#     give_technology = {
#         tech = tech_power_plant_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_power_plant_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_power_plant_4
#         message = no
#     }
#     give_technology = {
#         tech = tech_power_hub_1
#         message = no
#     }

#     give_technology = {
#         tech = tech_heritage_site
#         message = no
#     }
#     give_technology = {
#         tech = tech_hypercomms_forum
#         message = no
#     }
    
#     give_technology = {
#         tech = tech_planetary_unification
#         message = no
#     }
#     give_technology = {
#         tech = tech_colonial_centralization
#         message = no
#     }
#     give_technology = {
#         tech = tech_galactic_administration
#         message = no
#     }

#     #Ship sizes and ship hull upgrades (Level 1 for all but battleships)
#     give_technology = {
#         tech = tech_destroyers
#         message = no
#     }
#     give_technology = {
#         tech = tech_cruisers
#         message = no
#     }
#     give_technology = {
#         tech = tech_battleships
#         message = no
#     }
#     give_technology = {
#         tech = tech_corvette_hull_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_destroyer_hull_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_cruiser_hull_1
#         message = no
#     }

#     give_technology = {
#         tech = tech_starbase_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_starbase_4
#         message = no
#     }
#     give_technology = {
#         tech = tech_synchronized_defences
#         message = no
#     }

#     #Tier 2 labs
#     give_technology = {
#         tech = tech_basic_science_lab_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_basic_science_lab_2
#         message = no
#     }

#     #All basic weapons to tier 3
#     give_technology = {
#         tech = tech_lasers_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_lasers_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_mass_drivers_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_mass_drivers_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_missiles_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_missiles_3
#         message = no
#     }

#     #Tier1 advanced weapons
#     give_technology = {
#         tech = tech_energy_lance_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_mass_accelerator_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_kinetic_artillery_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_energy_torpedoes_1
#         message = no
#     }

#     #Tier 2 supplementary tech
#     give_technology = {
#         tech = tech_plasma_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_plasma_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_autocannons_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_autocannons_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_torpedoes_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_torpedoes_2
#         message = no
#     }

#     #Tier 2 strike crafts and PD, Tier 1 flack
#     give_technology = {
#         tech = tech_pd_tracking_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_pd_tracking_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_flak_batteries_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_strike_craft_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_strike_craft_2
#         message = no
#     }

#     #Tier 3 armour and shields
#     give_technology = {
#         tech = tech_ship_armor_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_ship_armor_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_shields_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_shields_3
#         message = no
#     }

#     #Tier 3 drives, egines, power and radars
#     give_technology = {
#         tech = tech_hyper_drive_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_hyper_drive_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_thrusters_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_thrusters_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_sensors_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_sensors_3
#         message = no
#     }
#     give_technology = {
#         tech = tech_fusion_power
#         message = no
#     }
#     give_technology = {
#         tech = tech_cold_fusion_power
#         message = no
#     }

#     #Tier 2 combat computers
#     give_technology = {
#         tech = tech_combat_computers_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_combat_computers_2
#         message = no
#     }
    
#     #Tier 2 command limit and fleet limit techs
#     give_technology = {
#         tech = tech_doctrine_fleet_size_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_doctrine_fleet_size_2
#         message = no
#     }
#     give_technology = {
#         tech = tech_doctrine_navy_size_1
#         message = no
#     }
#     give_technology = {
#         tech = tech_doctrine_navy_size_2
#         message = no
#     }


# }

#Fills their worlds with buildings (Not counting capitals)
# mem_broken_clock_set_buildings = {
#     while = {
#         limit = {
#             any_tile = {
#                 has_building = no
#             }
#         }
#         random_tile = {
#             limit = {
#                 has_building = no
#             }
#             set_building = building_mining_network_4
#             set_deposit = d_mineral_deposit
#         }
#         random_tile = {
#             limit = {
#                 has_building = no
#             }
#             set_building = building_power_plant_4
#             set_deposit = d_energy_deposit
#         }
#         IF = {
#             limit = {
#                 owner = { NOT = { has_authority = auth_machine_intelligence } }
#             }
#             random_tile = {
#                 limit = {
#                     has_building = no
#                 }
#                 set_building = building_hydroponics_farm_4
#                 set_deposit = d_farmland_deposit
#             }
#         }
#         ELSE = {
#             random_tile = {
#                 limit = {
#                     has_building = no
#                 }
#                 set_building = building_power_plant_4
#                 set_deposit = d_energy_deposit
#             }
#         }
#         random_tile = {
#             limit = {
#                 has_building = no
#                 NOT = {
#                     any_neighboring_tile = {
#                         OR = {
#                             has_building = "building_capital_1"
#                             has_building = "building_capital_2"
#                             has_building = "building_capital_3"
#                         }
#                     }
#                 }
#             }
#             random_list = {
#                 1 = { set_building = building_engineering_facility_2 }
#                 1 = { set_building = building_physics_lab_2 }
#                 1 = { set_building = building_biolab_2 }
#             }
#             random_list = {
#                 1 = { set_deposit = d_society_deposit }
#                 1 = { set_deposit = d_physics_deposit }
#                 1 = { set_deposit = d_engineering_deposit }
#             }
#         }
#     }
# }

#Creating fully furnished habitat
mem_broken_clock_create_habitat = {
    solar_system = {
        spawn_planet = {
            class = "pc_habitat"
            location = prev
            orbit_location = yes
            orbit_angle_offset = 45
            orbit_distance_offset = 9.899
            size = 6
            has_ring = no
        
            init_effect = {
                set_name = MEM_NAME_broken_clock_habitat_name
                set_owner = event_target:unwelcome_guests
                set_planet_entity = {
                    entity = "orbital_habitat_entity"
                    graphical_culture = event_target:unwelcome_guests
                }
                set_planet_flag = mining_habitat
                clear_deposits = yes
                while = {
                    count = 2
                    add_district = district_hab_housing
                    IF = {
                        limit = { owner = { is_gestalt = yes } }
                        add_district = district_hab_energy
                    }
                    ELSE = {
                        add_district = district_hab_commercial
                    }
                    add_district = district_hab_mining
                }
                while = {
                    count = 25
                    create_pop = {
                        species = event_target:newcomer_species
                    }
                }
                remove_all_buildings = yes
                add_building = building_hab_major_capital
                while = {
                    count = 1
                    add_building = building_factory_1
                }
                while = {
                    count = 2
                    add_building = building_foundry_1
                }
                add_building = building_fortress
                add_building = building_precinct_house
            }
        }
    }
}

#Kill broken clock country and create new one from ashes
mem_broken_clock_kill_invaders = {
    every_owned_pop = {
        limit = {
            OR = {
                is_same_species = owner_species
                AND = {
                    has_trait = trait_mechanical
                    NOT = { owner = { has_technology = tech_synthetic_workers } }
                }
            }
        }
        kill_pop = yes
    }
    while = {
        limit = {
            any_owned_planet = {
                num_pops > 0
            }
        }
        count = 100
        # log = "Iteration begins"
        random_owned_pop = {
            # log = "[This.Species.GetName]"
            species = { save_event_target_as = breakaway_species }
            IF = {
                limit = { has_trait = trait_hive_mind }
                planet = {
                    create_country = {
                        type = default
                        species = event_target:breakaway_species
                        ethos = {
                            ethic = ethic_gestalt_consciousness
                        }
                        authority = auth_hive_mind
                        civics = random
                        effect = {
                            copy_techs_from = {
                                target = root
                                except = { #Will need to review in case something that doesn't belong slips by
                                    # Horizon Signal
                                    tech_akx_worm_1
                                    tech_akx_worm_2
                                    tech_akx_worm_3
                                }
                            }
                            save_event_target_as = breakaway_country
                            set_country_flag = mem_broken_clock_breakaways
                            # log = "Country: [This.GetName]"
                        }
                    }
                    set_owner = event_target:breakaway_country
                    IF = {
                        limit = { 
                            exists = starbase 
                            starbase = {
                                owner = { is_same_value = root }
                            }
                        }
                        starbase = {
                            set_owner = event_target:breakaway_country
                        }
                    }
                }
            }
            ELSE_IF = {
                limit = { has_trait = trait_machine_unit }
                planet = {
                    create_country = {
                        type = default
                        species = event_target:breakaway_species
                        ethos = {
                            ethic = ethic_gestalt_consciousness
                        }
                        authority = auth_machine_intelligence
                        civics = random
                        effect = {
                            copy_techs_from = {
                                target = root
                                except = { #Will need to review in case something that doesn't belong slips by
                                    # Horizon Signal
                                    tech_akx_worm_1
                                    tech_akx_worm_2
                                    tech_akx_worm_3
                                }
                            }
                            # log = "Country: [This.GetName]"
                            save_event_target_as = breakaway_country
                            set_country_flag = mem_broken_clock_breakaways
                        }
                    }
                    set_owner = event_target:breakaway_country
                    IF = {
                        limit = { 
                            exists = starbase 
                            starbase = {
                                owner = { is_same_value = root }
                            }
                        }
                        starbase = {
                            set_owner = event_target:breakaway_country
                        }
                    }
                }
            }
            ELSE = {
                planet = {
                    create_country = {
                        type = default
                        species = event_target:breakaway_species
                        authority = random
                        civics = random
                        ethos = random
                        effect = {
                            copy_techs_from = {
                                target = root
                                except = { #Will need to review in case something that doesn't belong slips by
                                    # Horizon Signal
                                    tech_akx_worm_1
                                    tech_akx_worm_2
                                    tech_akx_worm_3
                                }
                            }
                            # log = "Country: [This.GetName]"
                            save_event_target_as = breakaway_country
                            set_country_flag = mem_broken_clock_breakaways
                        }
                    }
                    set_owner = event_target:breakaway_country
                    IF = {
                        limit = { 
                            exists = starbase 
                            starbase = {
                                owner = { is_same_value = root }
                            }
                        }
                        starbase = {
                            set_owner = event_target:breakaway_country
                        }
                    }
                }
            }
            prev = {
                every_owned_planet = {
                    # log = "[This.GetName]"
                    limit = {
                        any_owned_pop = { 
                            is_same_species = event_target:breakaway_species
                        }
                    }
                    set_owner = event_target:breakaway_country
                    IF = {
                        limit = { 
                            exists = starbase 
                            starbase = {
                                owner = { is_same_value = root }
                            }
                        }
                        starbase = {
                            set_owner = event_target:breakaway_country
                        }
                    }
                }
            }
            event_target:breakaway_country = {
                add_modifier = {
                    modifier = mem_broken_clock_rebel_country
                    days = 3600
                }
                add_resource = {
                    minerals = 2000
                    energy = 2000
                    influence = 500
                }
                IF = {
                    limit = {
                        NOR = {
                            has_authority = auth_machine_intelligence
                            NOT = { has_valid_civic = civic_machine_servitor }
                        }
                    }
                    add_resource = {
                        food = 200
                    }
                }
                add_100_unity_per_year_passed = yes
                every_owned_pop = {
                    remove_culture_shock = yes
                }
                IF = { # If machine units gained control over organic planets, turn them into assimilators or servitors (Or don't)
                    limit = {
                        has_authority = auth_machine_intelligence
                        NOR = {
                            has_valid_civic = civic_machine_servitor
                            has_valid_civic = civic_machine_assimilator
                        }
                        any_owned_pop = {
                            is_robot_pop = no
                            NOT = { has_trait = trait_machine_unit }
				        	is_sapient = yes
                        }
                    }
                    random_list = {
                        33 = {  }
                        33 = {
                            change_government = {
                                civics = {
                                    civic = civic_machine_servitor
                                    civic = random
                                    civic = random
                                }
                            }
                            add_resource = {
                                food = 200
                            }
                            set_name = random
                        }
                        33 = {
                            change_government = {
                                civics = {
                                    civic = civic_machine_assimilator
                                    civic = random
                                    civic = random
                                }
                            }
                            every_owned_pop = {
                                limit = {
                                    has_trait = trait_cybernetic
                                }
                                set_citizenship_type = {
                                    type = citizenship_full_machine
                                    country = event_target:breakaway_country
                                }
                            }
                            set_name = random
                        }
                    }
                }
                country_event = { id = game_start.9 }
                create_fleet_from_naval_cap = 0.5
                last_created_fleet = {
                    set_location = event_target:breakaway_country.capital_scope
                }
                every_owned_ship = {
                    limit = { is_ship_class = shipclass_military }
                    add_modifier = {
                        modifier = mem_broken_clock_free_ships
                        days = -1
                    }
                }
                capital_scope.starbase = {
                    if = {
                        limit = {
                            has_starbase_size = starbase_outpost
                        }
                        set_starbase_size = starbase_starport
                    }
                    set_starbase_module = {
                        slot = 0
                        module = shipyard
                    }
                    set_starbase_module = {
						slot = 1
						module = anchorage
					}
                }
            }
        }
    }
}